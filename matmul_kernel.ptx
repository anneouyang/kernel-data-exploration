//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_89
.address_size 64

	// .globl	matmul_kernel
.extern .shared .align 16 .b8 global_smem[];

.visible .entry matmul_kernel(
	.param .u64 matmul_kernel_param_0,
	.param .u64 matmul_kernel_param_1,
	.param .u64 matmul_kernel_param_2,
	.param .u32 matmul_kernel_param_3,
	.param .u32 matmul_kernel_param_4,
	.param .u32 matmul_kernel_param_5,
	.param .u32 matmul_kernel_param_6,
	.param .u32 matmul_kernel_param_7,
	.param .u32 matmul_kernel_param_8
)
.maxntid 128, 1, 1
{
	.reg .pred 	%p<23>;
	.reg .b16 	%rs<5>;
	.reg .b32 	%r<210>;
	.reg .f32 	%f<30>;
	.reg .b64 	%rd<34>;
	.loc	1 13 0
$L__func_begin0:
	.loc	1 13 0

	ld.param.u32 	%r53, [matmul_kernel_param_8];
	ld.param.u32 	%r52, [matmul_kernel_param_5];
	ld.param.u32 	%r51, [matmul_kernel_param_4];
	ld.param.u32 	%r50, [matmul_kernel_param_3];
	ld.param.u64 	%rd13, [matmul_kernel_param_2];
	ld.param.u64 	%rd12, [matmul_kernel_param_1];
	ld.param.u64 	%rd11, [matmul_kernel_param_0];
$L__tmp0:
	.loc	1 35 24
	// begin inline asm
	mov.u32 %r54, %ctaid.x;
	// end inline asm
$L__tmp1:
	.loc	2 44 22
	add.s32 	%r69, %r50, 15;
	.loc	2 44 28
	shr.s32 	%r70, %r69, 31;
	shr.u32 	%r71, %r70, 28;
	add.s32 	%r72, %r69, %r71;
	shr.s32 	%r73, %r72, 4;
$L__tmp2:
	.loc	2 44 22
	add.s32 	%r74, %r51, 15;
	.loc	2 44 28
	shr.s32 	%r75, %r74, 31;
	shr.u32 	%r76, %r75, 28;
	add.s32 	%r77, %r74, %r76;
	shr.s32 	%r78, %r77, 4;
$L__tmp3:
	.loc	1 38 38
	shl.b32 	%r80, %r78, 4;
	ld.param.u32 	%r81, [matmul_kernel_param_6];
	ld.param.u32 	%r82, [matmul_kernel_param_7];
	.loc	1 39 22
	div.s32 	%r83, %r54, %r80;
	.loc	1 40 29
	shl.b32 	%r84, %r83, 4;
	.loc	1 41 35
	sub.s32 	%r85, %r73, %r84;
	.loc	1 41 48
	min.s32 	%r87, %r85, 16;
	mul.lo.s32 	%r88, %r83, %r80;
	sub.s32 	%r89, %r54, %r88;
	.loc	1 43 40
	div.s32 	%r90, %r89, %r87;
	mul.lo.s32 	%r91, %r90, %r87;
	sub.s32 	%r92, %r89, %r91;
	.loc	1 42 27
	add.s32 	%r93, %r92, %r84;
	.loc	1 52 23
	shl.b32 	%r94, %r93, 4;
	.loc	1 52 51
	mov.u32 	%r95, %tid.x;
	and.b32  	%r1, %r95, 31;
	shr.u32 	%r2, %r95, 5;
	bfe.u32 	%r3, %r95, 3, 4;
	shl.b32 	%r96, %r95, 1;
	and.b32  	%r97, %r96, 2;
	and.b32  	%r98, %r96, 6;
	and.b32  	%r4, %r96, 14;
	.loc	1 52 38
	or.b32  	%r5, %r94, %r3;
	.loc	1 52 68
	rem.s32 	%r99, %r5, %r50;
	.loc	1 53 23
	shl.b32 	%r100, %r90, 4;
	.loc	1 53 38
	or.b32  	%r6, %r100, %r4;
	.loc	1 53 68
	rem.s32 	%r101, %r6, %r51;
	.loc	1 55 53
	mad.lo.s32 	%r102, %r99, %r81, %r4;
	.loc	1 55 22
	mul.wide.s32 	%rd18, %r102, 4;
	add.s64 	%rd14, %rd11, %rd18;
	.loc	1 56 52
	mad.lo.s32 	%r103, %r3, %r82, %r101;
	.loc	1 56 22
	mul.wide.s32 	%rd19, %r103, 4;
	add.s64 	%rd15, %rd12, %rd19;
$L__tmp4:
	.loc	2 44 22
	add.s32 	%r104, %r52, 15;
$L__tmp5:
	.loc	1 73 33
	shl.b32 	%r108, %r82, 4;
	.loc	1 64 22
	setp.lt.s32 	%p5, %r104, 16;
	setp.gt.s32 	%p6, %r104, 15;
	.loc	1 67 51
	setp.lt.s32 	%p7, %r4, %r52;
	.loc	1 67 20
	shl.b32 	%r109, %r3, 4;
	shr.u32 	%r110, %r95, 2;
	xor.b32  	%r111, %r110, %r96;
	and.b32  	%r112, %r111, 12;
	or.b32  	%r113, %r97, %r112;
	or.b32  	%r114, %r113, %r109;
	shl.b32 	%r115, %r114, 2;
	mov.u32 	%r116, global_smem;
	add.s32 	%r55, %r116, %r115;
	selp.b32 	%r117, 8, 0, %p6;
	selp.b32 	%r56, %r117, 0, %p7;
	mov.pred 	%p1, -1;
	// begin inline asm
	@%p1 cp.async.ca.shared.global [ %r55 + 0 ], [ %rd14 + 0 ], 0x8, %r56;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 68 51
	setp.lt.s32 	%p8, %r3, %r52;
	.loc	1 68 20
	shr.u32 	%r118, %r95, 1;
	xor.b32  	%r119, %r118, %r96;
	and.b32  	%r120, %r119, 8;
	or.b32  	%r121, %r98, %r120;
	or.b32  	%r122, %r121, %r109;
	shl.b32 	%r123, %r122, 2;
	add.s32 	%r124, %r116, %r123;
	add.s32 	%r57, %r124, 2048;
	selp.b32 	%r58, %r117, 0, %p8;
	// begin inline asm
	@%p1 cp.async.ca.shared.global [ %r57 + 0 ], [ %rd15 + 0 ], 0x8, %r58;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 64 22
	setp.gt.s32 	%p9, %r104, 31;
	.loc	1 72 18
	add.s64 	%rd16, %rd14, 64;
	.loc	1 73 18
	mul.wide.s32 	%rd20, %r108, 4;
	add.s64 	%rd17, %rd15, %rd20;
	.loc	1 67 55
	add.s32 	%r125, %r52, -16;
	.loc	1 67 51
	setp.lt.s32 	%p10, %r4, %r125;
	.loc	1 67 20
	bar.sync 	0;
	add.s32 	%r59, %r55, 1024;
	selp.b32 	%r126, 8, 0, %p10;
	selp.b32 	%r60, %r126, 0, %p9;
	// begin inline asm
	@%p1 cp.async.ca.shared.global [ %r59 + 0 ], [ %rd16 + 0 ], 0x8, %r60;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 68 51
	setp.lt.s32 	%p11, %r3, %r125;
	.loc	1 68 20
	add.s32 	%r61, %r124, 3072;
	selp.b32 	%r127, 8, 0, %p11;
	selp.b32 	%r62, %r127, 0, %p9;
	// begin inline asm
	@%p1 cp.async.ca.shared.global [ %r61 + 0 ], [ %rd17 + 0 ], 0x8, %r62;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 67 20
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	and.b32  	%r10, %r95, 7;
	bfe.u32 	%r11, %r95, 4, 1;
	bfe.u32 	%r12, %r95, 1, 2;
	and.b32  	%r128, %r95, 15;
	xor.b32  	%r129, %r11, %r12;
	shl.b32 	%r13, %r128, 4;
	shl.b32 	%r130, %r129, 2;
	or.b32  	%r14, %r130, %r13;
	shl.b32 	%r131, %r14, 2;
	add.s32 	%r67, %r116, %r131;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r200, %r201, %r202, %r203 }, [ %r67 + 0 ];
	// end inline asm
	.loc	1 68 20
	bfe.u32 	%r19, %r95, 5, 1;
	bfe.u32 	%r20, %r95, 2, 3;
	and.b32  	%r21, %r95, 3;
	mov.b32 	%r208, 0;
	mov.u32 	%r209, %r208;
	.loc	1 64 22
	@%p5 bra 	$L__BB0_4;
	.loc	1 0 22
	cvt.s64.s32 	%rd1, %r102;
	cvt.s64.s32 	%rd2, %r103;
	shr.s32 	%r105, %r104, 31;
	shr.u32 	%r106, %r105, 28;
	add.s32 	%r107, %r104, %r106;
	shr.s32 	%r7, %r107, 4;
	cvt.s64.s32 	%rd3, %r108;
	bfe.u32 	%r132, %r95, 1, 1;
	xor.b32  	%r133, %r19, %r132;
	shl.b32 	%r134, %r133, 3;
	or.b32  	%r135, %r134, %r20;
	shl.b32 	%r136, %r21, 4;
	or.b32  	%r22, %r135, %r136;
	add.s32 	%r23, %r7, -2;
	or.b32  	%r141, %r11, 2;
	xor.b32  	%r142, %r141, %r12;
	shl.b32 	%r143, %r142, 2;
	add.s32 	%r198, %r52, -32;
	or.b32  	%r25, %r13, %r143;
	.loc	1 64 22
	shl.b64 	%rd21, %rd3, 3;
	shl.b64 	%rd22, %rd2, 2;
	add.s64 	%rd23, %rd21, %rd22;
	add.s64 	%rd33, %rd12, %rd23;
	shl.b64 	%rd5, %rd3, 2;
	shl.b64 	%rd24, %rd1, 2;
	add.s64 	%rd25, %rd24, %rd11;
	add.s64 	%rd32, %rd25, 128;
	add.s32 	%r199, %r116, 2048;
	mov.f32 	%f26, 0f00000000;
	mov.b32 	%r206, 1;
	mov.b32 	%r205, 0;
	shl.b32 	%r170, %r22, 2;
	shl.b32 	%r172, %r25, 2;
	mov.u32 	%r204, %r116;
	mov.f32 	%f27, %f26;
	mov.f32 	%f28, %f26;
	mov.f32 	%f29, %f26;
	mov.u32 	%r207, %r205;
$L__BB0_2:
	.loc	1 68 20
	add.s32 	%r171, %r199, %r170;
	ld.shared.u32 	%r154, [%r171+256];
	ld.shared.u32 	%r153, [%r171];
	.loc	1 64 22
	setp.lt.s32 	%p14, %r207, %r23;
	.loc	1 67 20
	add.s32 	%r148, %r204, %r172;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r144, %r145, %r146, %r147 }, [ %r148 + 0 ];
	// end inline asm
	.loc	1 68 20
	ld.shared.u32 	%r159, [%r171+512];
	ld.shared.u32 	%r160, [%r171+768];
	.loc	1 70 35
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { %f26, %f27, %f28, %f29 }, { %r200, %r201, %r202, %r203 }, { %r153, %r154 }, { %f26, %f27, %f28, %f29 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f32.tf32.tf32.f32 { %f26, %f27, %f28, %f29 }, { %r144, %r145, %r146, %r147 }, { %r159, %r160 }, { %f26, %f27, %f28, %f29 };
	// end inline asm
	.loc	1 64 22
	add.s32 	%r173, %r206, 1;
	setp.lt.s32 	%p15, %r173, 2;
	selp.b32 	%r206, %r173, 0, %p15;
	.loc	1 67 51
	setp.lt.s32 	%p16, %r4, %r198;
	.loc	1 67 20
	bar.sync 	0;
	shl.b32 	%r174, %r206, 10;
	add.s32 	%r161, %r55, %r174;
	selp.b32 	%r175, 8, 0, %p16;
	selp.b32 	%r162, %r175, 0, %p14;
	// begin inline asm
	@%p1 cp.async.ca.shared.global [ %r161 + 0 ], [ %rd32 + 0 ], 0x8, %r162;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 68 51
	setp.lt.s32 	%p17, %r3, %r198;
	.loc	1 68 20
	add.s32 	%r163, %r57, %r174;
	selp.b32 	%r176, 8, 0, %p17;
	selp.b32 	%r164, %r176, 0, %p14;
	// begin inline asm
	@%p1 cp.async.ca.shared.global [ %r163 + 0 ], [ %rd33 + 0 ], 0x8, %r164;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 64 22
	add.s32 	%r177, %r205, 1;
	setp.lt.s32 	%p18, %r177, 2;
	selp.b32 	%r205, %r177, 0, %p18;
	.loc	1 67 20
	shl.b32 	%r178, %r205, 10;
	add.s32 	%r204, %r116, %r178;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	.loc	1 68 20
	add.s32 	%r199, %r204, 2048;
	.loc	1 67 20
	add.s32 	%r169, %r204, %r131;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r200, %r201, %r202, %r203 }, [ %r169 + 0 ];
	// end inline asm
	.loc	1 64 22
	add.s32 	%r207, %r207, 1;
	add.s64 	%rd33, %rd33, %rd5;
	add.s64 	%rd32, %rd32, 64;
	add.s32 	%r198, %r198, -16;
	setp.lt.s32 	%p19, %r207, %r7;
	@%p19 bra 	$L__BB0_2;
	.loc	1 74 23
	cvt.rn.f16.f32 	%rs1, %f27;
	cvt.rn.f16.f32 	%rs2, %f26;
	mov.b32 	%r208, {%rs2, %rs1};
	cvt.rn.f16.f32 	%rs3, %f29;
	cvt.rn.f16.f32 	%rs4, %f28;
	mov.b32 	%r209, {%rs4, %rs3};
$L__BB0_4:
	.loc	1 67 20
	shr.u32 	%r182, %r1, 3;
	.loc	1 64 22
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	.loc	1 80 33
	mul.lo.s32 	%r183, %r5, %r53;
	.loc	1 80 21
	mul.wide.s32 	%rd29, %r183, 2;
	add.s64 	%rd30, %rd13, %rd29;
	.loc	1 80 52
	mul.wide.s32 	%rd31, %r6, 2;
	add.s64 	%rd28, %rd30, %rd31;
	.loc	1 81 33
	setp.lt.s32 	%p21, %r5, %r50;
	.loc	1 81 58
	setp.lt.s32 	%p22, %r6, %r51;
	.loc	1 81 39
	and.pred  	%p20, %p21, %p22;
	.loc	1 82 21
	shl.b32 	%r184, %r21, 1;
	shl.b32 	%r185, %r19, 3;
	or.b32  	%r186, %r185, %r184;
	mad.lo.s32 	%r187, %r20, 18, %r186;
	shl.b32 	%r188, %r187, 1;
	add.s32 	%r190, %r116, %r188;
	st.shared.b32 	[%r190], %r208;
	st.shared.b32 	[%r190+288], %r209;
	bar.sync 	0;
	shl.b32 	%r191, %r2, 2;
	and.b32  	%r192, %r191, 12;
	or.b32  	%r193, %r192, %r182;
	shl.b32 	%r194, %r10, 1;
	mad.lo.s32 	%r195, %r193, 18, %r194;
	shl.b32 	%r196, %r195, 1;
	add.s32 	%r197, %r116, %r196;
	ld.shared.u32 	%r181, [%r197];
	// begin inline asm
	@%p20 st.global.b32 [ %rd28 + 0 ], { %r181 };
	// end inline asm
	.loc	1 82 4
	ret;
$L__tmp6:
$L__func_end0:

}
	.file	1 "/matx/u/aco/kernel-data-exploration/triton_ptx_matmul.py"
	.file	2 "/matx/u/aco/miniconda3/envs/cuda-monkeys/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 1
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 2
.b8 46
.b8 0
.b8 3
.b8 8
.b8 32
.b8 11
.b8 0
.b8 0
.b8 3
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 49
.b8 19
.b8 0
.b8 0
.b8 4
.b8 29
.b8 0
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 11
.b8 87
.b8 11
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 205
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 116
.b8 120
.b8 95
.b8 109
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 109
.b8 97
.b8 116
.b8 120
.b8 47
.b8 117
.b8 47
.b8 97
.b8 99
.b8 111
.b8 47
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 45
.b8 100
.b8 97
.b8 116
.b8 97
.b8 45
.b8 101
.b8 120
.b8 112
.b8 108
.b8 111
.b8 114
.b8 97
.b8 116
.b8 105
.b8 111
.b8 110
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
.b8 2
.b8 109
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1
.b8 3
.b64 $L__func_begin0
.b64 $L__func_end0
.b32 98
.b8 4
.b32 98
.b64 $L__tmp1
.b64 $L__tmp2
.b8 1
.b8 36
.b8 27
.b8 4
.b32 98
.b64 $L__tmp2
.b64 $L__tmp3
.b8 1
.b8 37
.b8 27
.b8 4
.b32 98
.b64 $L__tmp4
.b64 $L__tmp5
.b8 1
.b8 64
.b8 33
.b8 0
.b8 0
	}
	.section	.debug_loc	{	}
