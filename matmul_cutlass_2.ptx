//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-33961263
// Cuda compilation tools, release 12.4, V12.4.99
// Based on NVVM 7.0.1
//

.version 8.4
.target sm_87
.address_size 64

.global .align 1 .b8 _ZN48_INTERNAL_55c54cb5_17_matmul_cutlass_cu_8f1008db4cute7productE[1];
.global .align 1 .b8 _ZN48_INTERNAL_55c54cb5_17_matmul_cutlass_cu_8f1008db4cute1_E[1];
.global .align 1 .b8 _ZN48_INTERNAL_55c54cb5_17_matmul_cutlass_cu_8f1008db4cuda3std3__48in_placeE[1];
.global .align 1 .b8 _ZN48_INTERNAL_55c54cb5_17_matmul_cutlass_cu_8f1008db4cuda3std6ranges3__45__cpo4swapE[1];
.extern .shared .align 16 .b8 _ZN7cutlass17SharedStorageBaseE[];

.entry _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE(
	.param .align 8 .b8 _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0[368]
)
{
	.reg .pred 	%p<274>;
	.reg .b16 	%rs<4592>;
	.reg .b32 	%r<684>;
	.reg .b64 	%rd<312>;


	mov.b64 	%rd35, _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0;
	add.s64 	%rd1, %rd35, 24;
	mov.u32 	%r88, %ctaid.x;
	ld.param.u32 	%r1, [_ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0+24];
	shr.s32 	%r2, %r88, %r1;
	mov.u32 	%r89, %ctaid.y;
	shl.b32 	%r90, %r89, %r1;
	mov.u32 	%r91, -1;
	shl.b32 	%r92, %r91, %r1;
	not.b32 	%r93, %r92;
	and.b32  	%r94, %r88, %r93;
	add.s32 	%r3, %r94, %r90;
	ld.param.u32 	%r95, [_ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0+12];
	setp.le.s32 	%p9, %r95, %r2;
	ld.param.u32 	%r96, [_ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0+16];
	setp.le.s32 	%p10, %r96, %r3;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_22;

	mov.u32 	%r115, %ctaid.z;
	ld.param.u32 	%r116, [%rd1+312];
	mul.lo.s32 	%r117, %r116, %r115;
	add.s32 	%r118, %r117, %r116;
	ld.param.u32 	%r119, [%rd1+-16];
	min.s32 	%r120, %r119, %r118;
	sub.s32 	%r4, %r120, %r117;
	ld.param.v2.u32 	{%r121, %r122}, [%rd1+-24];
	mov.u32 	%r123, 0;
	ld.param.u64 	%rd2, [%rd1+16];
	ld.param.u64 	%rd3, [%rd1+24];
	ld.param.u64 	%rd45, [%rd1+32];
	shr.s32 	%r124, %r4, 31;
	shr.u32 	%r125, %r124, 29;
	add.s32 	%r126, %r4, %r125;
	and.b32  	%r127, %r126, -8;
	sub.s32 	%r128, %r4, %r127;
	setp.eq.s32 	%p12, %r128, 0;
	selp.b32 	%r129, 8, %r128, %p12;
	add.s32 	%r130, %r117, %r129;
	min.s32 	%r131, %r120, %r130;
	mov.u32 	%r132, %tid.x;
	shr.s32 	%r133, %r132, 31;
	shr.u32 	%r134, %r133, 29;
	add.s32 	%r135, %r132, %r134;
	and.b32  	%r136, %r135, -8;
	sub.s32 	%r137, %r132, %r136;
	shr.s32 	%r138, %r135, 3;
	add.s32 	%r139, %r137, %r117;
	shl.b32 	%r140, %r2, 7;
	add.s32 	%r141, %r138, %r140;
	setp.lt.s32 	%p13, %r141, %r121;
	setp.lt.s32 	%p14, %r139, %r131;
	and.pred  	%p15, %p14, %p13;
	selp.u32 	%r97, 1, 0, %p15;
	add.s32 	%r142, %r141, 32;
	setp.lt.s32 	%p16, %r142, %r121;
	and.pred  	%p17, %p14, %p16;
	selp.u32 	%r98, 1, 0, %p17;
	add.s32 	%r143, %r141, 64;
	setp.lt.s32 	%p18, %r143, %r121;
	and.pred  	%p19, %p14, %p18;
	selp.u32 	%r99, 1, 0, %p19;
	add.s32 	%r144, %r141, 96;
	setp.lt.s32 	%p20, %r144, %r121;
	and.pred  	%p21, %p14, %p20;
	selp.u32 	%r100, 1, 0, %p21;
	cvt.s64.s32 	%rd46, %r139;
	cvt.s64.s32 	%rd47, %r141;
	ld.param.u64 	%rd48, [%rd1+8];
	mul.lo.s64 	%rd49, %rd48, %rd47;
	add.s64 	%rd50, %rd49, %rd46;
	shl.b64 	%rd4, %rd50, 1;
	ld.param.u64 	%rd5, [%rd1+40];
	add.s64 	%rd37, %rd5, %rd4;
	ld.param.u64 	%rd6, [%rd1+64];
	ld.param.u64 	%rd7, [%rd1+72];
	ld.param.u64 	%rd51, [%rd1+80];
	shr.u32 	%r145, %r133, 25;
	add.s32 	%r146, %r132, %r145;
	and.b32  	%r147, %r146, -128;
	sub.s32 	%r148, %r132, %r147;
	shr.s32 	%r149, %r146, 7;
	shl.b32 	%r150, %r3, 7;
	add.s32 	%r151, %r148, %r150;
	add.s32 	%r152, %r149, %r117;
	setp.lt.s32 	%p22, %r152, %r131;
	setp.lt.s32 	%p23, %r151, %r122;
	and.pred  	%p24, %p23, %p22;
	selp.u32 	%r101, 1, 0, %p24;
	add.s32 	%r153, %r152, 2;
	setp.lt.s32 	%p25, %r153, %r131;
	and.pred  	%p26, %p23, %p25;
	selp.u32 	%r102, 1, 0, %p26;
	add.s32 	%r154, %r152, 4;
	setp.lt.s32 	%p27, %r154, %r131;
	and.pred  	%p28, %p23, %p27;
	selp.u32 	%r103, 1, 0, %p28;
	add.s32 	%r155, %r152, 6;
	setp.lt.s32 	%p29, %r155, %r131;
	and.pred  	%p30, %p23, %p29;
	selp.u32 	%r104, 1, 0, %p30;
	cvt.s64.s32 	%rd52, %r151;
	cvt.s64.s32 	%rd53, %r152;
	ld.param.u64 	%rd8, [%rd1+56];
	mul.lo.s64 	%rd54, %rd8, %rd53;
	add.s64 	%rd55, %rd54, %rd52;
	shl.b64 	%rd9, %rd55, 1;
	ld.param.u64 	%rd10, [%rd1+88];
	add.s64 	%rd41, %rd10, %rd9;
	shr.u32 	%r156, %r132, 5;
	mov.u32 	%r157, 31;
	shfl.sync.idx.b32 	%r159|%p31, %r156, %r123, %r157, %r91;
	and.b32  	%r160, %r132, 31;
	shr.u32 	%r161, %r160, 4;
	and.b32  	%r162, %r132, 1;
	bfi.b32 	%r163, %r161, %r162, 1, 31;
	shl.b32 	%r164, %r163, 4;
	mov.u32 	%r165, _ZN7cutlass17SharedStorageBaseE;
	add.s32 	%r166, %r165, %r164;
	add.s32 	%r167, %r165, 4352;
	shl.b32 	%r168, %r132, 3;
	and.b32  	%r169, %r168, 112;
	add.s32 	%r170, %r167, %r169;
	mad.lo.s32 	%r7, %r137, 136, %r138;
	shr.s32 	%r171, %r159, 31;
	shr.u32 	%r172, %r171, 29;
	add.s32 	%r173, %r159, %r172;
	and.b32  	%r174, %r173, -8;
	sub.s32 	%r175, %r159, %r174;
	shr.s32 	%r8, %r173, 3;
	shr.s32 	%r176, %r175, 31;
	shr.u32 	%r177, %r176, 30;
	add.s32 	%r178, %r175, %r177;
	and.b32  	%r179, %r178, -4;
	sub.s32 	%r9, %r175, %r179;
	shr.s32 	%r10, %r178, 2;
	shl.b32 	%r180, %r8, 7;
	shl.b32 	%r181, %r9, 2;
	shl.b32 	%r182, %r10, 3;
	mov.u16 	%rs4526, 0;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r97, 0;
  mov.b16 %rs329, %rs4526;
  @p ld.global.L2::128B.u16 %rs329, [%rd37];
}

	// end inline asm
	add.s64 	%rd38, %rd37, %rd2;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r98, 0;
  mov.b16 %rs331, %rs4526;
  @p ld.global.L2::128B.u16 %rs331, [%rd38];
}

	// end inline asm
	add.s64 	%rd39, %rd38, %rd2;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r99, 0;
  mov.b16 %rs333, %rs4526;
  @p ld.global.L2::128B.u16 %rs333, [%rd39];
}

	// end inline asm
	add.s64 	%rd40, %rd39, %rd2;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r100, 0;
  mov.b16 %rs335, %rs4526;
  @p ld.global.L2::128B.u16 %rs335, [%rd40];
}

	// end inline asm
	sub.s64 	%rd11, %rd3, %rd45;
	selp.u32 	%r183, 1, 0, %p13;
	selp.u32 	%r184, -1, 0, %p16;
	bfi.b32 	%r185, %r184, %r183, 1, 1;
	selp.u16 	%rs409, 1, 0, %p18;
	mul.wide.u16 	%r186, %rs409, 4;
	or.b32  	%r187, %r186, %r185;
	selp.u16 	%rs410, 1, 0, %p20;
	mul.wide.u16 	%r188, %rs410, 8;
	or.b32  	%r11, %r188, %r187;
	cvt.s64.s32 	%rd12, %r129;
	mul.wide.s32 	%rd13, %r129, 2;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r101, 0;
  mov.b16 %rs337, %rs4526;
  @p ld.global.L2::128B.u16 %rs337, [%rd41];
}

	// end inline asm
	add.s64 	%rd42, %rd41, %rd6;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r102, 0;
  mov.b16 %rs339, %rs4526;
  @p ld.global.L2::128B.u16 %rs339, [%rd42];
}

	// end inline asm
	add.s64 	%rd43, %rd42, %rd6;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r103, 0;
  mov.b16 %rs341, %rs4526;
  @p ld.global.L2::128B.u16 %rs341, [%rd43];
}

	// end inline asm
	add.s64 	%rd44, %rd43, %rd6;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r104, 0;
  mov.b16 %rs343, %rs4526;
  @p ld.global.L2::128B.u16 %rs343, [%rd44];
}

	// end inline asm
	sub.s64 	%rd14, %rd7, %rd51;
	selp.u32 	%r189, 1, 0, %p23;
	selp.u32 	%r190, -1, 0, %p23;
	bfi.b32 	%r191, %r190, %r189, 1, 1;
	selp.u16 	%rs411, 1, 0, %p23;
	mul.wide.u16 	%r192, %rs411, 4;
	or.b32  	%r193, %r192, %r191;
	mul.wide.u16 	%r194, %rs411, 8;
	or.b32  	%r12, %r194, %r193;
	shl.b32 	%r195, %r7, 1;
	add.s32 	%r196, %r165, %r195;
	st.shared.u16 	[%r196], %rs329;
	st.shared.u16 	[%r196+64], %rs331;
	st.shared.u16 	[%r196+128], %rs333;
	st.shared.u16 	[%r196+192], %rs335;
	shl.b32 	%r197, %r132, 1;
	add.s32 	%r13, %r167, %r197;
	st.shared.u16 	[%r13], %rs337;
	st.shared.u16 	[%r13+512], %rs339;
	st.shared.u16 	[%r13+1024], %rs341;
	st.shared.u16 	[%r13+1536], %rs343;
	bar.sync 	0;
	mad.lo.s32 	%r198, %r8, 136, %r181;
	shl.b32 	%r199, %r198, 4;
	add.s32 	%r109, %r166, %r199;
	// begin inline asm
	ld.shared.v4.b32 {%r671, %r672, %r673, %r674}, [%r109];
	// end inline asm
	add.s32 	%r675, %r109, 272;
	add.s32 	%r200, %r180, %r182;
	shl.b32 	%r201, %r200, 4;
	add.s32 	%r114, %r170, %r201;
	// begin inline asm
	ld.shared.v4.b32 {%r667, %r668, %r669, %r670}, [%r114];
	// end inline asm
	add.s32 	%r676, %r114, 256;
	setp.lt.s32 	%p32, %r4, 1;
	mov.u16 	%rs4527, %rs4526;
	mov.u16 	%rs4528, %rs4526;
	mov.u16 	%rs4529, %rs4526;
	mov.u16 	%rs4530, %rs4526;
	mov.u16 	%rs4531, %rs4526;
	mov.u16 	%rs4532, %rs4526;
	mov.u16 	%rs4533, %rs4526;
	mov.u16 	%rs4534, %rs4526;
	mov.u16 	%rs4535, %rs4526;
	mov.u16 	%rs4536, %rs4526;
	mov.u16 	%rs4537, %rs4526;
	mov.u16 	%rs4538, %rs4526;
	mov.u16 	%rs4539, %rs4526;
	mov.u16 	%rs4540, %rs4526;
	mov.u16 	%rs4541, %rs4526;
	mov.u16 	%rs4542, %rs4526;
	mov.u16 	%rs4543, %rs4526;
	mov.u16 	%rs4544, %rs4526;
	mov.u16 	%rs4545, %rs4526;
	mov.u16 	%rs4546, %rs4526;
	mov.u16 	%rs4547, %rs4526;
	mov.u16 	%rs4548, %rs4526;
	mov.u16 	%rs4549, %rs4526;
	mov.u16 	%rs4550, %rs4526;
	mov.u16 	%rs4551, %rs4526;
	mov.u16 	%rs4552, %rs4526;
	mov.u16 	%rs4553, %rs4526;
	mov.u16 	%rs4554, %rs4526;
	mov.u16 	%rs4555, %rs4526;
	mov.u16 	%rs4556, %rs4526;
	mov.u16 	%rs4557, %rs4526;
	mov.u16 	%rs4558, %rs4526;
	mov.u16 	%rs4559, %rs4526;
	mov.u16 	%rs4560, %rs4526;
	mov.u16 	%rs4561, %rs4526;
	mov.u16 	%rs4562, %rs4526;
	mov.u16 	%rs4563, %rs4526;
	mov.u16 	%rs4564, %rs4526;
	mov.u16 	%rs4565, %rs4526;
	mov.u16 	%rs4566, %rs4526;
	mov.u16 	%rs4567, %rs4526;
	mov.u16 	%rs4568, %rs4526;
	mov.u16 	%rs4569, %rs4526;
	mov.u16 	%rs4570, %rs4526;
	mov.u16 	%rs4571, %rs4526;
	mov.u16 	%rs4572, %rs4526;
	mov.u16 	%rs4573, %rs4526;
	mov.u16 	%rs4574, %rs4526;
	mov.u16 	%rs4575, %rs4526;
	mov.u16 	%rs4576, %rs4526;
	mov.u16 	%rs4577, %rs4526;
	mov.u16 	%rs4578, %rs4526;
	mov.u16 	%rs4579, %rs4526;
	mov.u16 	%rs4580, %rs4526;
	mov.u16 	%rs4581, %rs4526;
	mov.u16 	%rs4582, %rs4526;
	mov.u16 	%rs4583, %rs4526;
	mov.u16 	%rs4584, %rs4526;
	mov.u16 	%rs4585, %rs4526;
	mov.u16 	%rs4586, %rs4526;
	mov.u16 	%rs4587, %rs4526;
	mov.u16 	%rs4588, %rs4526;
	mov.u16 	%rs4589, %rs4526;
	@%p32 bra 	$L__BB0_7;

	setp.gt.s32 	%p33, %r4, 8;
	add.s32 	%r203, %r4, 7;
	shr.s32 	%r204, %r203, 31;
	shr.u32 	%r205, %r204, 29;
	add.s32 	%r206, %r203, %r205;
	shr.s32 	%r207, %r206, 3;
	add.s32 	%r678, %r13, 2048;
	add.s32 	%r677, %r196, 2176;
	mov.u32 	%r679, 1;
	mul.lo.s64 	%rd56, %rd8, %rd12;
	shl.b64 	%rd57, %rd56, 1;
	add.s64 	%rd311, %rd10, %rd14;
	mul.lo.s64 	%rd58, %rd6, 3;
	add.s64 	%rd59, %rd57, %rd58;
	add.s64 	%rd16, %rd59, %rd9;
	add.s64 	%rd310, %rd5, %rd11;
	mul.lo.s64 	%rd60, %rd2, 3;
	add.s64 	%rd61, %rd13, %rd60;
	add.s64 	%rd18, %rd61, %rd4;
	add.s32 	%r664, %r207, 1;
	selp.b32 	%r665, %r12, 0, %p33;
	selp.b32 	%r666, %r11, 0, %p33;
	mov.u16 	%rs475, 0;
	mov.u16 	%rs4583, %rs475;
	mov.u16 	%rs4575, %rs475;
	mov.u16 	%rs4567, %rs475;
	mov.u16 	%rs4559, %rs475;
	mov.u16 	%rs4551, %rs475;
	mov.u16 	%rs4543, %rs475;
	mov.u16 	%rs4535, %rs475;
	mov.u16 	%rs4527, %rs475;
	mov.u16 	%rs4526, %rs475;
	mov.u16 	%rs4534, %rs475;
	mov.u16 	%rs4542, %rs475;
	mov.u16 	%rs4550, %rs475;
	mov.u16 	%rs4558, %rs475;
	mov.u16 	%rs4566, %rs475;
	mov.u16 	%rs4574, %rs475;
	mov.u16 	%rs4582, %rs475;
	mov.u16 	%rs4585, %rs475;
	mov.u16 	%rs4577, %rs475;
	mov.u16 	%rs4569, %rs475;
	mov.u16 	%rs4561, %rs475;
	mov.u16 	%rs4553, %rs475;
	mov.u16 	%rs4545, %rs475;
	mov.u16 	%rs4537, %rs475;
	mov.u16 	%rs4529, %rs475;
	mov.u16 	%rs4528, %rs475;
	mov.u16 	%rs4536, %rs475;
	mov.u16 	%rs4544, %rs475;
	mov.u16 	%rs4552, %rs475;
	mov.u16 	%rs4560, %rs475;
	mov.u16 	%rs4568, %rs475;
	mov.u16 	%rs4576, %rs475;
	mov.u16 	%rs4584, %rs475;
	mov.u16 	%rs4587, %rs475;
	mov.u16 	%rs4579, %rs475;
	mov.u16 	%rs4571, %rs475;
	mov.u16 	%rs4563, %rs475;
	mov.u16 	%rs4555, %rs475;
	mov.u16 	%rs4547, %rs475;
	mov.u16 	%rs4539, %rs475;
	mov.u16 	%rs4531, %rs475;
	mov.u16 	%rs4530, %rs475;
	mov.u16 	%rs4538, %rs475;
	mov.u16 	%rs4546, %rs475;
	mov.u16 	%rs4554, %rs475;
	mov.u16 	%rs4562, %rs475;
	mov.u16 	%rs4570, %rs475;
	mov.u16 	%rs4578, %rs475;
	mov.u16 	%rs4586, %rs475;
	mov.u16 	%rs4589, %rs475;
	mov.u16 	%rs4581, %rs475;
	mov.u16 	%rs4573, %rs475;
	mov.u16 	%rs4565, %rs475;
	mov.u16 	%rs4557, %rs475;
	mov.u16 	%rs4549, %rs475;
	mov.u16 	%rs4541, %rs475;
	mov.u16 	%rs4533, %rs475;
	mov.u16 	%rs4532, %rs475;
	mov.u16 	%rs4540, %rs475;
	mov.u16 	%rs4548, %rs475;
	mov.u16 	%rs4556, %rs475;
	mov.u16 	%rs4564, %rs475;
	mov.u16 	%rs4572, %rs475;
	mov.u16 	%rs4580, %rs475;
	mov.u16 	%rs4588, %rs475;

$L__BB0_3:
	.pragma "nounroll";
	// begin inline asm
	ld.shared.v4.b32 {%r211, %r212, %r213, %r214}, [%r675];
	// end inline asm
	// begin inline asm
	ld.shared.v4.b32 {%r216, %r217, %r218, %r219}, [%r676];
	// end inline asm
	and.b32  	%r221, %r666, 1;
	add.s64 	%rd62, %rd310, %rd18;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r221, 0;
  mov.b16 %rs476, %rs475;
  @p ld.global.L2::128B.u16 %rs476, [%rd62];
}

	// end inline asm
	and.b32  	%r289, %r666, 2;
	shr.u32 	%r222, %r289, 1;
	add.s64 	%rd63, %rd62, %rd2;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r222, 0;
  mov.b16 %rs478, %rs475;
  @p ld.global.L2::128B.u16 %rs478, [%rd63];
}

	// end inline asm
	and.b32  	%r290, %r666, 4;
	shr.u32 	%r223, %r290, 2;
	add.s64 	%rd64, %rd63, %rd2;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r223, 0;
  mov.b16 %rs480, %rs475;
  @p ld.global.L2::128B.u16 %rs480, [%rd64];
}

	// end inline asm
	and.b32  	%r291, %r666, 8;
	shr.u32 	%r224, %r291, 3;
	add.s64 	%rd65, %rd64, %rd2;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r224, 0;
  mov.b16 %rs482, %rs475;
  @p ld.global.L2::128B.u16 %rs482, [%rd65];
}

	// end inline asm
	and.b32  	%r225, %r665, 1;
	add.s64 	%rd66, %rd311, %rd16;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r225, 0;
  mov.b16 %rs484, %rs475;
  @p ld.global.L2::128B.u16 %rs484, [%rd66];
}

	// end inline asm
	and.b32  	%r292, %r665, 2;
	shr.u32 	%r226, %r292, 1;
	add.s64 	%rd67, %rd66, %rd6;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r226, 0;
  mov.b16 %rs486, %rs475;
  @p ld.global.L2::128B.u16 %rs486, [%rd67];
}

	// end inline asm
	and.b32  	%r293, %r665, 4;
	shr.u32 	%r227, %r293, 2;
	add.s64 	%rd68, %rd67, %rd6;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r227, 0;
  mov.b16 %rs488, %rs475;
  @p ld.global.L2::128B.u16 %rs488, [%rd68];
}

	// end inline asm
	and.b32  	%r294, %r665, 8;
	shr.u32 	%r228, %r294, 3;
	add.s64 	%rd69, %rd68, %rd6;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r228, 0;
  mov.b16 %rs490, %rs475;
  @p ld.global.L2::128B.u16 %rs490, [%rd69];
}

	// end inline asm
	add.s32 	%r664, %r664, -1;
	cvt.u16.u32 	%rs536, %r667;
	cvt.u16.u32 	%rs871, %r671;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs492,%rs871,%rs536,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs495,%rs492,c,%rs4588;}

	// end inline asm
	shr.u32 	%r295, %r671, 16;
	cvt.u16.u32 	%rs865, %r295;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs498,%rs865,%rs536,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs501,%rs498,c,%rs4580;}

	// end inline asm
	cvt.u16.u32 	%rs859, %r672;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs504,%rs859,%rs536,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs507,%rs504,c,%rs4572;}

	// end inline asm
	shr.u32 	%r296, %r672, 16;
	cvt.u16.u32 	%rs853, %r296;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs510,%rs853,%rs536,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs513,%rs510,c,%rs4564;}

	// end inline asm
	cvt.u16.u32 	%rs847, %r673;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs516,%rs847,%rs536,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs519,%rs516,c,%rs4556;}

	// end inline asm
	shr.u32 	%r297, %r673, 16;
	cvt.u16.u32 	%rs841, %r297;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs522,%rs841,%rs536,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs525,%rs522,c,%rs4548;}

	// end inline asm
	cvt.u16.u32 	%rs835, %r674;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs528,%rs835,%rs536,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs531,%rs528,c,%rs4540;}

	// end inline asm
	shr.u32 	%r298, %r674, 16;
	cvt.u16.u32 	%rs829, %r298;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs534,%rs829,%rs536,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs537,%rs534,c,%rs4532;}

	// end inline asm
	shr.u32 	%r299, %r667, 16;
	cvt.u16.u32 	%rs584, %r299;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs540,%rs829,%rs584,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs543,%rs540,c,%rs4533;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs546,%rs835,%rs584,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs549,%rs546,c,%rs4541;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs552,%rs841,%rs584,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs555,%rs552,c,%rs4549;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs558,%rs847,%rs584,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs561,%rs558,c,%rs4557;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs564,%rs853,%rs584,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs567,%rs564,c,%rs4565;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs570,%rs859,%rs584,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs573,%rs570,c,%rs4573;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs576,%rs865,%rs584,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs579,%rs576,c,%rs4581;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs582,%rs871,%rs584,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs585,%rs582,c,%rs4589;}

	// end inline asm
	cvt.u16.u32 	%rs632, %r668;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs588,%rs871,%rs632,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs591,%rs588,c,%rs4586;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs594,%rs865,%rs632,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs597,%rs594,c,%rs4578;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs600,%rs859,%rs632,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs603,%rs600,c,%rs4570;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs606,%rs853,%rs632,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs609,%rs606,c,%rs4562;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs612,%rs847,%rs632,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs615,%rs612,c,%rs4554;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs618,%rs841,%rs632,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs621,%rs618,c,%rs4546;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs624,%rs835,%rs632,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs627,%rs624,c,%rs4538;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs630,%rs829,%rs632,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs633,%rs630,c,%rs4530;}

	// end inline asm
	shr.u32 	%r300, %r668, 16;
	cvt.u16.u32 	%rs680, %r300;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs636,%rs829,%rs680,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs639,%rs636,c,%rs4531;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs642,%rs835,%rs680,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs645,%rs642,c,%rs4539;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs648,%rs841,%rs680,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs651,%rs648,c,%rs4547;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs654,%rs847,%rs680,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs657,%rs654,c,%rs4555;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs660,%rs853,%rs680,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs663,%rs660,c,%rs4563;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs666,%rs859,%rs680,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs669,%rs666,c,%rs4571;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs672,%rs865,%rs680,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs675,%rs672,c,%rs4579;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs678,%rs871,%rs680,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs681,%rs678,c,%rs4587;}

	// end inline asm
	cvt.u16.u32 	%rs728, %r669;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs684,%rs871,%rs728,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs687,%rs684,c,%rs4584;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs690,%rs865,%rs728,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs693,%rs690,c,%rs4576;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs696,%rs859,%rs728,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs699,%rs696,c,%rs4568;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs702,%rs853,%rs728,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs705,%rs702,c,%rs4560;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs708,%rs847,%rs728,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs711,%rs708,c,%rs4552;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs714,%rs841,%rs728,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs717,%rs714,c,%rs4544;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs720,%rs835,%rs728,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs723,%rs720,c,%rs4536;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs726,%rs829,%rs728,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs729,%rs726,c,%rs4528;}

	// end inline asm
	shr.u32 	%r301, %r669, 16;
	cvt.u16.u32 	%rs776, %r301;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs732,%rs829,%rs776,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs735,%rs732,c,%rs4529;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs738,%rs835,%rs776,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs741,%rs738,c,%rs4537;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs744,%rs841,%rs776,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs747,%rs744,c,%rs4545;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs750,%rs847,%rs776,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs753,%rs750,c,%rs4553;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs756,%rs853,%rs776,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs759,%rs756,c,%rs4561;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs762,%rs859,%rs776,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs765,%rs762,c,%rs4569;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs768,%rs865,%rs776,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs771,%rs768,c,%rs4577;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs774,%rs871,%rs776,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs777,%rs774,c,%rs4585;}

	// end inline asm
	cvt.u16.u32 	%rs824, %r670;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs780,%rs871,%rs824,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs783,%rs780,c,%rs4582;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs786,%rs865,%rs824,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs789,%rs786,c,%rs4574;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs792,%rs859,%rs824,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs795,%rs792,c,%rs4566;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs798,%rs853,%rs824,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs801,%rs798,c,%rs4558;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs804,%rs847,%rs824,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs807,%rs804,c,%rs4550;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs810,%rs841,%rs824,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs813,%rs810,c,%rs4542;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs816,%rs835,%rs824,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs819,%rs816,c,%rs4534;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs822,%rs829,%rs824,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs825,%rs822,c,%rs4526;}

	// end inline asm
	shr.u32 	%r302, %r670, 16;
	cvt.u16.u32 	%rs872, %r302;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs828,%rs829,%rs872,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs831,%rs828,c,%rs4527;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs834,%rs835,%rs872,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs837,%rs834,c,%rs4535;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs840,%rs841,%rs872,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs843,%rs840,c,%rs4543;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs846,%rs847,%rs872,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs849,%rs846,c,%rs4551;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs852,%rs853,%rs872,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs855,%rs852,c,%rs4559;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs858,%rs859,%rs872,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs861,%rs858,c,%rs4567;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs864,%rs865,%rs872,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs867,%rs864,c,%rs4575;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs870,%rs871,%rs872,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs873,%rs870,c,%rs4583;}

	// end inline asm
	add.s32 	%r233, %r675, 272;
	// begin inline asm
	ld.shared.v4.b32 {%r229, %r230, %r231, %r232}, [%r233];
	// end inline asm
	add.s32 	%r238, %r676, 256;
	// begin inline asm
	ld.shared.v4.b32 {%r234, %r235, %r236, %r237}, [%r238];
	// end inline asm
	cvt.u16.u32 	%rs1255, %r211;
	cvt.u16.u32 	%rs920, %r216;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs876,%rs1255,%rs920,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs879,%rs876,c,%rs495;}

	// end inline asm
	shr.u32 	%r303, %r211, 16;
	cvt.u16.u32 	%rs1249, %r303;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs882,%rs1249,%rs920,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs885,%rs882,c,%rs501;}

	// end inline asm
	cvt.u16.u32 	%rs1243, %r212;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs888,%rs1243,%rs920,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs891,%rs888,c,%rs507;}

	// end inline asm
	shr.u32 	%r304, %r212, 16;
	cvt.u16.u32 	%rs1237, %r304;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs894,%rs1237,%rs920,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs897,%rs894,c,%rs513;}

	// end inline asm
	cvt.u16.u32 	%rs1231, %r213;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs900,%rs1231,%rs920,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs903,%rs900,c,%rs519;}

	// end inline asm
	shr.u32 	%r305, %r213, 16;
	cvt.u16.u32 	%rs1225, %r305;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs906,%rs1225,%rs920,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs909,%rs906,c,%rs525;}

	// end inline asm
	cvt.u16.u32 	%rs1219, %r214;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs912,%rs1219,%rs920,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs915,%rs912,c,%rs531;}

	// end inline asm
	shr.u32 	%r306, %r214, 16;
	cvt.u16.u32 	%rs1213, %r306;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs918,%rs1213,%rs920,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs921,%rs918,c,%rs537;}

	// end inline asm
	shr.u32 	%r307, %r216, 16;
	cvt.u16.u32 	%rs968, %r307;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs924,%rs1213,%rs968,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs927,%rs924,c,%rs543;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs930,%rs1219,%rs968,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs933,%rs930,c,%rs549;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs936,%rs1225,%rs968,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs939,%rs936,c,%rs555;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs942,%rs1231,%rs968,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs945,%rs942,c,%rs561;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs948,%rs1237,%rs968,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs951,%rs948,c,%rs567;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs954,%rs1243,%rs968,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs957,%rs954,c,%rs573;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs960,%rs1249,%rs968,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs963,%rs960,c,%rs579;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs966,%rs1255,%rs968,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs969,%rs966,c,%rs585;}

	// end inline asm
	cvt.u16.u32 	%rs1016, %r217;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs972,%rs1255,%rs1016,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs975,%rs972,c,%rs591;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs978,%rs1249,%rs1016,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs981,%rs978,c,%rs597;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs984,%rs1243,%rs1016,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs987,%rs984,c,%rs603;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs990,%rs1237,%rs1016,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs993,%rs990,c,%rs609;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs996,%rs1231,%rs1016,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs999,%rs996,c,%rs615;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1002,%rs1225,%rs1016,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1005,%rs1002,c,%rs621;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1008,%rs1219,%rs1016,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1011,%rs1008,c,%rs627;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1014,%rs1213,%rs1016,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1017,%rs1014,c,%rs633;}

	// end inline asm
	shr.u32 	%r308, %r217, 16;
	cvt.u16.u32 	%rs1064, %r308;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1020,%rs1213,%rs1064,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1023,%rs1020,c,%rs639;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1026,%rs1219,%rs1064,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1029,%rs1026,c,%rs645;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1032,%rs1225,%rs1064,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1035,%rs1032,c,%rs651;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1038,%rs1231,%rs1064,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1041,%rs1038,c,%rs657;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1044,%rs1237,%rs1064,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1047,%rs1044,c,%rs663;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1050,%rs1243,%rs1064,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1053,%rs1050,c,%rs669;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1056,%rs1249,%rs1064,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1059,%rs1056,c,%rs675;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1062,%rs1255,%rs1064,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1065,%rs1062,c,%rs681;}

	// end inline asm
	cvt.u16.u32 	%rs1112, %r218;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1068,%rs1255,%rs1112,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1071,%rs1068,c,%rs687;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1074,%rs1249,%rs1112,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1077,%rs1074,c,%rs693;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1080,%rs1243,%rs1112,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1083,%rs1080,c,%rs699;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1086,%rs1237,%rs1112,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1089,%rs1086,c,%rs705;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1092,%rs1231,%rs1112,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1095,%rs1092,c,%rs711;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1098,%rs1225,%rs1112,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1101,%rs1098,c,%rs717;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1104,%rs1219,%rs1112,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1107,%rs1104,c,%rs723;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1110,%rs1213,%rs1112,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1113,%rs1110,c,%rs729;}

	// end inline asm
	shr.u32 	%r309, %r218, 16;
	cvt.u16.u32 	%rs1160, %r309;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1116,%rs1213,%rs1160,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1119,%rs1116,c,%rs735;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1122,%rs1219,%rs1160,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1125,%rs1122,c,%rs741;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1128,%rs1225,%rs1160,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1131,%rs1128,c,%rs747;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1134,%rs1231,%rs1160,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1137,%rs1134,c,%rs753;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1140,%rs1237,%rs1160,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1143,%rs1140,c,%rs759;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1146,%rs1243,%rs1160,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1149,%rs1146,c,%rs765;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1152,%rs1249,%rs1160,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1155,%rs1152,c,%rs771;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1158,%rs1255,%rs1160,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1161,%rs1158,c,%rs777;}

	// end inline asm
	cvt.u16.u32 	%rs1208, %r219;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1164,%rs1255,%rs1208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1167,%rs1164,c,%rs783;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1170,%rs1249,%rs1208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1173,%rs1170,c,%rs789;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1176,%rs1243,%rs1208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1179,%rs1176,c,%rs795;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1182,%rs1237,%rs1208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1185,%rs1182,c,%rs801;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1188,%rs1231,%rs1208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1191,%rs1188,c,%rs807;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1194,%rs1225,%rs1208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1197,%rs1194,c,%rs813;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1200,%rs1219,%rs1208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1203,%rs1200,c,%rs819;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1206,%rs1213,%rs1208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1209,%rs1206,c,%rs825;}

	// end inline asm
	shr.u32 	%r310, %r219, 16;
	cvt.u16.u32 	%rs1256, %r310;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1212,%rs1213,%rs1256,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1215,%rs1212,c,%rs831;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1218,%rs1219,%rs1256,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1221,%rs1218,c,%rs837;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1224,%rs1225,%rs1256,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1227,%rs1224,c,%rs843;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1230,%rs1231,%rs1256,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1233,%rs1230,c,%rs849;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1236,%rs1237,%rs1256,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1239,%rs1236,c,%rs855;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1242,%rs1243,%rs1256,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1245,%rs1242,c,%rs861;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1248,%rs1249,%rs1256,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1251,%rs1248,c,%rs867;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1254,%rs1255,%rs1256,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1257,%rs1254,c,%rs873;}

	// end inline asm
	add.s32 	%r243, %r675, 544;
	// begin inline asm
	ld.shared.v4.b32 {%r239, %r240, %r241, %r242}, [%r243];
	// end inline asm
	add.s32 	%r248, %r676, 512;
	// begin inline asm
	ld.shared.v4.b32 {%r244, %r245, %r246, %r247}, [%r248];
	// end inline asm
	cvt.u16.u32 	%rs1639, %r229;
	cvt.u16.u32 	%rs1304, %r234;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1260,%rs1639,%rs1304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1263,%rs1260,c,%rs879;}

	// end inline asm
	shr.u32 	%r311, %r229, 16;
	cvt.u16.u32 	%rs1633, %r311;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1266,%rs1633,%rs1304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1269,%rs1266,c,%rs885;}

	// end inline asm
	cvt.u16.u32 	%rs1627, %r230;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1272,%rs1627,%rs1304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1275,%rs1272,c,%rs891;}

	// end inline asm
	shr.u32 	%r312, %r230, 16;
	cvt.u16.u32 	%rs1621, %r312;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1278,%rs1621,%rs1304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1281,%rs1278,c,%rs897;}

	// end inline asm
	cvt.u16.u32 	%rs1615, %r231;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1284,%rs1615,%rs1304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1287,%rs1284,c,%rs903;}

	// end inline asm
	shr.u32 	%r313, %r231, 16;
	cvt.u16.u32 	%rs1609, %r313;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1290,%rs1609,%rs1304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1293,%rs1290,c,%rs909;}

	// end inline asm
	cvt.u16.u32 	%rs1603, %r232;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1296,%rs1603,%rs1304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1299,%rs1296,c,%rs915;}

	// end inline asm
	shr.u32 	%r314, %r232, 16;
	cvt.u16.u32 	%rs1597, %r314;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1302,%rs1597,%rs1304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1305,%rs1302,c,%rs921;}

	// end inline asm
	shr.u32 	%r315, %r234, 16;
	cvt.u16.u32 	%rs1352, %r315;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1308,%rs1597,%rs1352,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1311,%rs1308,c,%rs927;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1314,%rs1603,%rs1352,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1317,%rs1314,c,%rs933;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1320,%rs1609,%rs1352,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1323,%rs1320,c,%rs939;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1326,%rs1615,%rs1352,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1329,%rs1326,c,%rs945;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1332,%rs1621,%rs1352,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1335,%rs1332,c,%rs951;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1338,%rs1627,%rs1352,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1341,%rs1338,c,%rs957;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1344,%rs1633,%rs1352,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1347,%rs1344,c,%rs963;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1350,%rs1639,%rs1352,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1353,%rs1350,c,%rs969;}

	// end inline asm
	cvt.u16.u32 	%rs1400, %r235;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1356,%rs1639,%rs1400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1359,%rs1356,c,%rs975;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1362,%rs1633,%rs1400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1365,%rs1362,c,%rs981;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1368,%rs1627,%rs1400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1371,%rs1368,c,%rs987;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1374,%rs1621,%rs1400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1377,%rs1374,c,%rs993;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1380,%rs1615,%rs1400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1383,%rs1380,c,%rs999;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1386,%rs1609,%rs1400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1389,%rs1386,c,%rs1005;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1392,%rs1603,%rs1400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1395,%rs1392,c,%rs1011;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1398,%rs1597,%rs1400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1401,%rs1398,c,%rs1017;}

	// end inline asm
	shr.u32 	%r316, %r235, 16;
	cvt.u16.u32 	%rs1448, %r316;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1404,%rs1597,%rs1448,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1407,%rs1404,c,%rs1023;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1410,%rs1603,%rs1448,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1413,%rs1410,c,%rs1029;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1416,%rs1609,%rs1448,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1419,%rs1416,c,%rs1035;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1422,%rs1615,%rs1448,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1425,%rs1422,c,%rs1041;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1428,%rs1621,%rs1448,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1431,%rs1428,c,%rs1047;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1434,%rs1627,%rs1448,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1437,%rs1434,c,%rs1053;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1440,%rs1633,%rs1448,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1443,%rs1440,c,%rs1059;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1446,%rs1639,%rs1448,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1449,%rs1446,c,%rs1065;}

	// end inline asm
	cvt.u16.u32 	%rs1496, %r236;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1452,%rs1639,%rs1496,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1455,%rs1452,c,%rs1071;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1458,%rs1633,%rs1496,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1461,%rs1458,c,%rs1077;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1464,%rs1627,%rs1496,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1467,%rs1464,c,%rs1083;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1470,%rs1621,%rs1496,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1473,%rs1470,c,%rs1089;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1476,%rs1615,%rs1496,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1479,%rs1476,c,%rs1095;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1482,%rs1609,%rs1496,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1485,%rs1482,c,%rs1101;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1488,%rs1603,%rs1496,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1491,%rs1488,c,%rs1107;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1494,%rs1597,%rs1496,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1497,%rs1494,c,%rs1113;}

	// end inline asm
	shr.u32 	%r317, %r236, 16;
	cvt.u16.u32 	%rs1544, %r317;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1500,%rs1597,%rs1544,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1503,%rs1500,c,%rs1119;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1506,%rs1603,%rs1544,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1509,%rs1506,c,%rs1125;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1512,%rs1609,%rs1544,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1515,%rs1512,c,%rs1131;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1518,%rs1615,%rs1544,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1521,%rs1518,c,%rs1137;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1524,%rs1621,%rs1544,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1527,%rs1524,c,%rs1143;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1530,%rs1627,%rs1544,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1533,%rs1530,c,%rs1149;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1536,%rs1633,%rs1544,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1539,%rs1536,c,%rs1155;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1542,%rs1639,%rs1544,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1545,%rs1542,c,%rs1161;}

	// end inline asm
	cvt.u16.u32 	%rs1592, %r237;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1548,%rs1639,%rs1592,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1551,%rs1548,c,%rs1167;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1554,%rs1633,%rs1592,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1557,%rs1554,c,%rs1173;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1560,%rs1627,%rs1592,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1563,%rs1560,c,%rs1179;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1566,%rs1621,%rs1592,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1569,%rs1566,c,%rs1185;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1572,%rs1615,%rs1592,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1575,%rs1572,c,%rs1191;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1578,%rs1609,%rs1592,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1581,%rs1578,c,%rs1197;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1584,%rs1603,%rs1592,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1587,%rs1584,c,%rs1203;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1590,%rs1597,%rs1592,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1593,%rs1590,c,%rs1209;}

	// end inline asm
	shr.u32 	%r318, %r237, 16;
	cvt.u16.u32 	%rs1640, %r318;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1596,%rs1597,%rs1640,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1599,%rs1596,c,%rs1215;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1602,%rs1603,%rs1640,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1605,%rs1602,c,%rs1221;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1608,%rs1609,%rs1640,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1611,%rs1608,c,%rs1227;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1614,%rs1615,%rs1640,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1617,%rs1614,c,%rs1233;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1620,%rs1621,%rs1640,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1623,%rs1620,c,%rs1239;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1626,%rs1627,%rs1640,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1629,%rs1626,c,%rs1245;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1632,%rs1633,%rs1640,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1635,%rs1632,c,%rs1251;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1638,%rs1639,%rs1640,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1641,%rs1638,c,%rs1257;}

	// end inline asm
	add.s32 	%r253, %r675, 816;
	// begin inline asm
	ld.shared.v4.b32 {%r249, %r250, %r251, %r252}, [%r253];
	// end inline asm
	add.s32 	%r258, %r676, 768;
	// begin inline asm
	ld.shared.v4.b32 {%r254, %r255, %r256, %r257}, [%r258];
	// end inline asm
	cvt.u16.u32 	%rs2023, %r239;
	cvt.u16.u32 	%rs1688, %r244;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1644,%rs2023,%rs1688,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1647,%rs1644,c,%rs1263;}

	// end inline asm
	shr.u32 	%r319, %r239, 16;
	cvt.u16.u32 	%rs2017, %r319;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1650,%rs2017,%rs1688,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1653,%rs1650,c,%rs1269;}

	// end inline asm
	cvt.u16.u32 	%rs2011, %r240;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1656,%rs2011,%rs1688,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1659,%rs1656,c,%rs1275;}

	// end inline asm
	shr.u32 	%r320, %r240, 16;
	cvt.u16.u32 	%rs2005, %r320;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1662,%rs2005,%rs1688,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1665,%rs1662,c,%rs1281;}

	// end inline asm
	cvt.u16.u32 	%rs1999, %r241;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1668,%rs1999,%rs1688,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1671,%rs1668,c,%rs1287;}

	// end inline asm
	shr.u32 	%r321, %r241, 16;
	cvt.u16.u32 	%rs1993, %r321;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1674,%rs1993,%rs1688,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1677,%rs1674,c,%rs1293;}

	// end inline asm
	cvt.u16.u32 	%rs1987, %r242;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1680,%rs1987,%rs1688,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1683,%rs1680,c,%rs1299;}

	// end inline asm
	shr.u32 	%r322, %r242, 16;
	cvt.u16.u32 	%rs1981, %r322;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1686,%rs1981,%rs1688,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1689,%rs1686,c,%rs1305;}

	// end inline asm
	shr.u32 	%r323, %r244, 16;
	cvt.u16.u32 	%rs1736, %r323;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1692,%rs1981,%rs1736,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1695,%rs1692,c,%rs1311;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1698,%rs1987,%rs1736,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1701,%rs1698,c,%rs1317;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1704,%rs1993,%rs1736,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1707,%rs1704,c,%rs1323;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1710,%rs1999,%rs1736,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1713,%rs1710,c,%rs1329;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1716,%rs2005,%rs1736,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1719,%rs1716,c,%rs1335;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1722,%rs2011,%rs1736,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1725,%rs1722,c,%rs1341;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1728,%rs2017,%rs1736,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1731,%rs1728,c,%rs1347;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1734,%rs2023,%rs1736,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1737,%rs1734,c,%rs1353;}

	// end inline asm
	cvt.u16.u32 	%rs1784, %r245;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1740,%rs2023,%rs1784,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1743,%rs1740,c,%rs1359;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1746,%rs2017,%rs1784,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1749,%rs1746,c,%rs1365;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1752,%rs2011,%rs1784,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1755,%rs1752,c,%rs1371;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1758,%rs2005,%rs1784,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1761,%rs1758,c,%rs1377;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1764,%rs1999,%rs1784,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1767,%rs1764,c,%rs1383;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1770,%rs1993,%rs1784,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1773,%rs1770,c,%rs1389;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1776,%rs1987,%rs1784,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1779,%rs1776,c,%rs1395;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1782,%rs1981,%rs1784,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1785,%rs1782,c,%rs1401;}

	// end inline asm
	shr.u32 	%r324, %r245, 16;
	cvt.u16.u32 	%rs1832, %r324;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1788,%rs1981,%rs1832,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1791,%rs1788,c,%rs1407;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1794,%rs1987,%rs1832,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1797,%rs1794,c,%rs1413;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1800,%rs1993,%rs1832,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1803,%rs1800,c,%rs1419;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1806,%rs1999,%rs1832,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1809,%rs1806,c,%rs1425;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1812,%rs2005,%rs1832,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1815,%rs1812,c,%rs1431;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1818,%rs2011,%rs1832,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1821,%rs1818,c,%rs1437;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1824,%rs2017,%rs1832,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1827,%rs1824,c,%rs1443;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1830,%rs2023,%rs1832,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1833,%rs1830,c,%rs1449;}

	// end inline asm
	cvt.u16.u32 	%rs1880, %r246;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1836,%rs2023,%rs1880,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1839,%rs1836,c,%rs1455;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1842,%rs2017,%rs1880,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1845,%rs1842,c,%rs1461;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1848,%rs2011,%rs1880,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1851,%rs1848,c,%rs1467;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1854,%rs2005,%rs1880,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1857,%rs1854,c,%rs1473;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1860,%rs1999,%rs1880,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1863,%rs1860,c,%rs1479;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1866,%rs1993,%rs1880,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1869,%rs1866,c,%rs1485;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1872,%rs1987,%rs1880,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1875,%rs1872,c,%rs1491;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1878,%rs1981,%rs1880,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1881,%rs1878,c,%rs1497;}

	// end inline asm
	shr.u32 	%r325, %r246, 16;
	cvt.u16.u32 	%rs1928, %r325;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1884,%rs1981,%rs1928,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1887,%rs1884,c,%rs1503;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1890,%rs1987,%rs1928,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1893,%rs1890,c,%rs1509;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1896,%rs1993,%rs1928,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1899,%rs1896,c,%rs1515;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1902,%rs1999,%rs1928,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1905,%rs1902,c,%rs1521;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1908,%rs2005,%rs1928,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1911,%rs1908,c,%rs1527;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1914,%rs2011,%rs1928,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1917,%rs1914,c,%rs1533;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1920,%rs2017,%rs1928,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1923,%rs1920,c,%rs1539;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1926,%rs2023,%rs1928,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1929,%rs1926,c,%rs1545;}

	// end inline asm
	cvt.u16.u32 	%rs1976, %r247;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1932,%rs2023,%rs1976,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1935,%rs1932,c,%rs1551;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1938,%rs2017,%rs1976,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1941,%rs1938,c,%rs1557;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1944,%rs2011,%rs1976,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1947,%rs1944,c,%rs1563;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1950,%rs2005,%rs1976,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1953,%rs1950,c,%rs1569;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1956,%rs1999,%rs1976,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1959,%rs1956,c,%rs1575;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1962,%rs1993,%rs1976,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1965,%rs1962,c,%rs1581;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1968,%rs1987,%rs1976,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1971,%rs1968,c,%rs1587;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1974,%rs1981,%rs1976,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1977,%rs1974,c,%rs1593;}

	// end inline asm
	shr.u32 	%r326, %r247, 16;
	cvt.u16.u32 	%rs2024, %r326;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1980,%rs1981,%rs2024,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1983,%rs1980,c,%rs1599;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1986,%rs1987,%rs2024,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1989,%rs1986,c,%rs1605;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1992,%rs1993,%rs2024,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs1995,%rs1992,c,%rs1611;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs1998,%rs1999,%rs2024,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2001,%rs1998,c,%rs1617;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2004,%rs2005,%rs2024,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2007,%rs2004,c,%rs1623;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2010,%rs2011,%rs2024,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2013,%rs2010,c,%rs1629;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2016,%rs2017,%rs2024,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2019,%rs2016,c,%rs1635;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2022,%rs2023,%rs2024,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2025,%rs2022,c,%rs1641;}

	// end inline asm
	add.s32 	%r263, %r675, 1088;
	// begin inline asm
	ld.shared.v4.b32 {%r259, %r260, %r261, %r262}, [%r263];
	// end inline asm
	add.s32 	%r268, %r676, 1024;
	// begin inline asm
	ld.shared.v4.b32 {%r264, %r265, %r266, %r267}, [%r268];
	// end inline asm
	cvt.u16.u32 	%rs2407, %r249;
	cvt.u16.u32 	%rs2072, %r254;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2028,%rs2407,%rs2072,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2031,%rs2028,c,%rs1647;}

	// end inline asm
	shr.u32 	%r327, %r249, 16;
	cvt.u16.u32 	%rs2401, %r327;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2034,%rs2401,%rs2072,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2037,%rs2034,c,%rs1653;}

	// end inline asm
	cvt.u16.u32 	%rs2395, %r250;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2040,%rs2395,%rs2072,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2043,%rs2040,c,%rs1659;}

	// end inline asm
	shr.u32 	%r328, %r250, 16;
	cvt.u16.u32 	%rs2389, %r328;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2046,%rs2389,%rs2072,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2049,%rs2046,c,%rs1665;}

	// end inline asm
	cvt.u16.u32 	%rs2383, %r251;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2052,%rs2383,%rs2072,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2055,%rs2052,c,%rs1671;}

	// end inline asm
	shr.u32 	%r329, %r251, 16;
	cvt.u16.u32 	%rs2377, %r329;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2058,%rs2377,%rs2072,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2061,%rs2058,c,%rs1677;}

	// end inline asm
	cvt.u16.u32 	%rs2371, %r252;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2064,%rs2371,%rs2072,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2067,%rs2064,c,%rs1683;}

	// end inline asm
	shr.u32 	%r330, %r252, 16;
	cvt.u16.u32 	%rs2365, %r330;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2070,%rs2365,%rs2072,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2073,%rs2070,c,%rs1689;}

	// end inline asm
	shr.u32 	%r331, %r254, 16;
	cvt.u16.u32 	%rs2120, %r331;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2076,%rs2365,%rs2120,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2079,%rs2076,c,%rs1695;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2082,%rs2371,%rs2120,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2085,%rs2082,c,%rs1701;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2088,%rs2377,%rs2120,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2091,%rs2088,c,%rs1707;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2094,%rs2383,%rs2120,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2097,%rs2094,c,%rs1713;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2100,%rs2389,%rs2120,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2103,%rs2100,c,%rs1719;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2106,%rs2395,%rs2120,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2109,%rs2106,c,%rs1725;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2112,%rs2401,%rs2120,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2115,%rs2112,c,%rs1731;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2118,%rs2407,%rs2120,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2121,%rs2118,c,%rs1737;}

	// end inline asm
	cvt.u16.u32 	%rs2168, %r255;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2124,%rs2407,%rs2168,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2127,%rs2124,c,%rs1743;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2130,%rs2401,%rs2168,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2133,%rs2130,c,%rs1749;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2136,%rs2395,%rs2168,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2139,%rs2136,c,%rs1755;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2142,%rs2389,%rs2168,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2145,%rs2142,c,%rs1761;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2148,%rs2383,%rs2168,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2151,%rs2148,c,%rs1767;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2154,%rs2377,%rs2168,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2157,%rs2154,c,%rs1773;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2160,%rs2371,%rs2168,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2163,%rs2160,c,%rs1779;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2166,%rs2365,%rs2168,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2169,%rs2166,c,%rs1785;}

	// end inline asm
	shr.u32 	%r332, %r255, 16;
	cvt.u16.u32 	%rs2216, %r332;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2172,%rs2365,%rs2216,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2175,%rs2172,c,%rs1791;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2178,%rs2371,%rs2216,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2181,%rs2178,c,%rs1797;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2184,%rs2377,%rs2216,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2187,%rs2184,c,%rs1803;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2190,%rs2383,%rs2216,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2193,%rs2190,c,%rs1809;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2196,%rs2389,%rs2216,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2199,%rs2196,c,%rs1815;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2202,%rs2395,%rs2216,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2205,%rs2202,c,%rs1821;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2208,%rs2401,%rs2216,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2211,%rs2208,c,%rs1827;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2214,%rs2407,%rs2216,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2217,%rs2214,c,%rs1833;}

	// end inline asm
	cvt.u16.u32 	%rs2264, %r256;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2220,%rs2407,%rs2264,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2223,%rs2220,c,%rs1839;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2226,%rs2401,%rs2264,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2229,%rs2226,c,%rs1845;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2232,%rs2395,%rs2264,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2235,%rs2232,c,%rs1851;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2238,%rs2389,%rs2264,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2241,%rs2238,c,%rs1857;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2244,%rs2383,%rs2264,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2247,%rs2244,c,%rs1863;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2250,%rs2377,%rs2264,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2253,%rs2250,c,%rs1869;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2256,%rs2371,%rs2264,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2259,%rs2256,c,%rs1875;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2262,%rs2365,%rs2264,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2265,%rs2262,c,%rs1881;}

	// end inline asm
	shr.u32 	%r333, %r256, 16;
	cvt.u16.u32 	%rs2312, %r333;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2268,%rs2365,%rs2312,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2271,%rs2268,c,%rs1887;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2274,%rs2371,%rs2312,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2277,%rs2274,c,%rs1893;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2280,%rs2377,%rs2312,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2283,%rs2280,c,%rs1899;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2286,%rs2383,%rs2312,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2289,%rs2286,c,%rs1905;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2292,%rs2389,%rs2312,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2295,%rs2292,c,%rs1911;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2298,%rs2395,%rs2312,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2301,%rs2298,c,%rs1917;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2304,%rs2401,%rs2312,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2307,%rs2304,c,%rs1923;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2310,%rs2407,%rs2312,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2313,%rs2310,c,%rs1929;}

	// end inline asm
	cvt.u16.u32 	%rs2360, %r257;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2316,%rs2407,%rs2360,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2319,%rs2316,c,%rs1935;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2322,%rs2401,%rs2360,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2325,%rs2322,c,%rs1941;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2328,%rs2395,%rs2360,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2331,%rs2328,c,%rs1947;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2334,%rs2389,%rs2360,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2337,%rs2334,c,%rs1953;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2340,%rs2383,%rs2360,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2343,%rs2340,c,%rs1959;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2346,%rs2377,%rs2360,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2349,%rs2346,c,%rs1965;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2352,%rs2371,%rs2360,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2355,%rs2352,c,%rs1971;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2358,%rs2365,%rs2360,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2361,%rs2358,c,%rs1977;}

	// end inline asm
	shr.u32 	%r334, %r257, 16;
	cvt.u16.u32 	%rs2408, %r334;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2364,%rs2365,%rs2408,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2367,%rs2364,c,%rs1983;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2370,%rs2371,%rs2408,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2373,%rs2370,c,%rs1989;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2376,%rs2377,%rs2408,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2379,%rs2376,c,%rs1995;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2382,%rs2383,%rs2408,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2385,%rs2382,c,%rs2001;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2388,%rs2389,%rs2408,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2391,%rs2388,c,%rs2007;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2394,%rs2395,%rs2408,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2397,%rs2394,c,%rs2013;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2400,%rs2401,%rs2408,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2403,%rs2400,c,%rs2019;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2406,%rs2407,%rs2408,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2409,%rs2406,c,%rs2025;}

	// end inline asm
	add.s32 	%r273, %r675, 1360;
	// begin inline asm
	ld.shared.v4.b32 {%r269, %r270, %r271, %r272}, [%r273];
	// end inline asm
	add.s32 	%r278, %r676, 1280;
	// begin inline asm
	ld.shared.v4.b32 {%r274, %r275, %r276, %r277}, [%r278];
	// end inline asm
	cvt.u16.u32 	%rs2791, %r259;
	cvt.u16.u32 	%rs2456, %r264;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2412,%rs2791,%rs2456,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2415,%rs2412,c,%rs2031;}

	// end inline asm
	shr.u32 	%r335, %r259, 16;
	cvt.u16.u32 	%rs2785, %r335;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2418,%rs2785,%rs2456,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2421,%rs2418,c,%rs2037;}

	// end inline asm
	cvt.u16.u32 	%rs2779, %r260;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2424,%rs2779,%rs2456,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2427,%rs2424,c,%rs2043;}

	// end inline asm
	shr.u32 	%r336, %r260, 16;
	cvt.u16.u32 	%rs2773, %r336;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2430,%rs2773,%rs2456,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2433,%rs2430,c,%rs2049;}

	// end inline asm
	cvt.u16.u32 	%rs2767, %r261;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2436,%rs2767,%rs2456,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2439,%rs2436,c,%rs2055;}

	// end inline asm
	shr.u32 	%r337, %r261, 16;
	cvt.u16.u32 	%rs2761, %r337;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2442,%rs2761,%rs2456,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2445,%rs2442,c,%rs2061;}

	// end inline asm
	cvt.u16.u32 	%rs2755, %r262;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2448,%rs2755,%rs2456,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2451,%rs2448,c,%rs2067;}

	// end inline asm
	shr.u32 	%r338, %r262, 16;
	cvt.u16.u32 	%rs2749, %r338;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2454,%rs2749,%rs2456,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2457,%rs2454,c,%rs2073;}

	// end inline asm
	shr.u32 	%r339, %r264, 16;
	cvt.u16.u32 	%rs2504, %r339;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2460,%rs2749,%rs2504,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2463,%rs2460,c,%rs2079;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2466,%rs2755,%rs2504,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2469,%rs2466,c,%rs2085;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2472,%rs2761,%rs2504,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2475,%rs2472,c,%rs2091;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2478,%rs2767,%rs2504,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2481,%rs2478,c,%rs2097;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2484,%rs2773,%rs2504,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2487,%rs2484,c,%rs2103;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2490,%rs2779,%rs2504,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2493,%rs2490,c,%rs2109;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2496,%rs2785,%rs2504,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2499,%rs2496,c,%rs2115;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2502,%rs2791,%rs2504,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2505,%rs2502,c,%rs2121;}

	// end inline asm
	cvt.u16.u32 	%rs2552, %r265;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2508,%rs2791,%rs2552,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2511,%rs2508,c,%rs2127;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2514,%rs2785,%rs2552,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2517,%rs2514,c,%rs2133;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2520,%rs2779,%rs2552,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2523,%rs2520,c,%rs2139;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2526,%rs2773,%rs2552,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2529,%rs2526,c,%rs2145;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2532,%rs2767,%rs2552,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2535,%rs2532,c,%rs2151;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2538,%rs2761,%rs2552,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2541,%rs2538,c,%rs2157;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2544,%rs2755,%rs2552,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2547,%rs2544,c,%rs2163;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2550,%rs2749,%rs2552,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2553,%rs2550,c,%rs2169;}

	// end inline asm
	shr.u32 	%r340, %r265, 16;
	cvt.u16.u32 	%rs2600, %r340;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2556,%rs2749,%rs2600,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2559,%rs2556,c,%rs2175;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2562,%rs2755,%rs2600,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2565,%rs2562,c,%rs2181;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2568,%rs2761,%rs2600,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2571,%rs2568,c,%rs2187;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2574,%rs2767,%rs2600,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2577,%rs2574,c,%rs2193;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2580,%rs2773,%rs2600,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2583,%rs2580,c,%rs2199;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2586,%rs2779,%rs2600,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2589,%rs2586,c,%rs2205;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2592,%rs2785,%rs2600,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2595,%rs2592,c,%rs2211;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2598,%rs2791,%rs2600,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2601,%rs2598,c,%rs2217;}

	// end inline asm
	cvt.u16.u32 	%rs2648, %r266;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2604,%rs2791,%rs2648,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2607,%rs2604,c,%rs2223;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2610,%rs2785,%rs2648,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2613,%rs2610,c,%rs2229;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2616,%rs2779,%rs2648,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2619,%rs2616,c,%rs2235;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2622,%rs2773,%rs2648,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2625,%rs2622,c,%rs2241;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2628,%rs2767,%rs2648,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2631,%rs2628,c,%rs2247;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2634,%rs2761,%rs2648,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2637,%rs2634,c,%rs2253;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2640,%rs2755,%rs2648,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2643,%rs2640,c,%rs2259;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2646,%rs2749,%rs2648,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2649,%rs2646,c,%rs2265;}

	// end inline asm
	shr.u32 	%r341, %r266, 16;
	cvt.u16.u32 	%rs2696, %r341;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2652,%rs2749,%rs2696,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2655,%rs2652,c,%rs2271;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2658,%rs2755,%rs2696,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2661,%rs2658,c,%rs2277;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2664,%rs2761,%rs2696,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2667,%rs2664,c,%rs2283;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2670,%rs2767,%rs2696,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2673,%rs2670,c,%rs2289;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2676,%rs2773,%rs2696,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2679,%rs2676,c,%rs2295;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2682,%rs2779,%rs2696,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2685,%rs2682,c,%rs2301;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2688,%rs2785,%rs2696,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2691,%rs2688,c,%rs2307;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2694,%rs2791,%rs2696,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2697,%rs2694,c,%rs2313;}

	// end inline asm
	cvt.u16.u32 	%rs2744, %r267;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2700,%rs2791,%rs2744,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2703,%rs2700,c,%rs2319;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2706,%rs2785,%rs2744,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2709,%rs2706,c,%rs2325;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2712,%rs2779,%rs2744,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2715,%rs2712,c,%rs2331;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2718,%rs2773,%rs2744,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2721,%rs2718,c,%rs2337;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2724,%rs2767,%rs2744,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2727,%rs2724,c,%rs2343;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2730,%rs2761,%rs2744,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2733,%rs2730,c,%rs2349;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2736,%rs2755,%rs2744,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2739,%rs2736,c,%rs2355;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2742,%rs2749,%rs2744,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2745,%rs2742,c,%rs2361;}

	// end inline asm
	shr.u32 	%r342, %r267, 16;
	cvt.u16.u32 	%rs2792, %r342;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2748,%rs2749,%rs2792,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2751,%rs2748,c,%rs2367;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2754,%rs2755,%rs2792,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2757,%rs2754,c,%rs2373;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2760,%rs2761,%rs2792,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2763,%rs2760,c,%rs2379;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2766,%rs2767,%rs2792,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2769,%rs2766,c,%rs2385;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2772,%rs2773,%rs2792,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2775,%rs2772,c,%rs2391;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2778,%rs2779,%rs2792,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2781,%rs2778,c,%rs2397;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2784,%rs2785,%rs2792,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2787,%rs2784,c,%rs2403;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2790,%rs2791,%rs2792,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2793,%rs2790,c,%rs2409;}

	// end inline asm
	add.s32 	%r283, %r675, 1632;
	// begin inline asm
	ld.shared.v4.b32 {%r279, %r280, %r281, %r282}, [%r283];
	// end inline asm
	add.s32 	%r288, %r676, 1536;
	// begin inline asm
	ld.shared.v4.b32 {%r284, %r285, %r286, %r287}, [%r288];
	// end inline asm
	cvt.u16.u32 	%rs3175, %r269;
	cvt.u16.u32 	%rs2840, %r274;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2796,%rs3175,%rs2840,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2799,%rs2796,c,%rs2415;}

	// end inline asm
	shr.u32 	%r343, %r269, 16;
	cvt.u16.u32 	%rs3169, %r343;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2802,%rs3169,%rs2840,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2805,%rs2802,c,%rs2421;}

	// end inline asm
	cvt.u16.u32 	%rs3163, %r270;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2808,%rs3163,%rs2840,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2811,%rs2808,c,%rs2427;}

	// end inline asm
	shr.u32 	%r344, %r270, 16;
	cvt.u16.u32 	%rs3157, %r344;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2814,%rs3157,%rs2840,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2817,%rs2814,c,%rs2433;}

	// end inline asm
	cvt.u16.u32 	%rs3151, %r271;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2820,%rs3151,%rs2840,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2823,%rs2820,c,%rs2439;}

	// end inline asm
	shr.u32 	%r345, %r271, 16;
	cvt.u16.u32 	%rs3145, %r345;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2826,%rs3145,%rs2840,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2829,%rs2826,c,%rs2445;}

	// end inline asm
	cvt.u16.u32 	%rs3139, %r272;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2832,%rs3139,%rs2840,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2835,%rs2832,c,%rs2451;}

	// end inline asm
	shr.u32 	%r346, %r272, 16;
	cvt.u16.u32 	%rs3133, %r346;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2838,%rs3133,%rs2840,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2841,%rs2838,c,%rs2457;}

	// end inline asm
	shr.u32 	%r347, %r274, 16;
	cvt.u16.u32 	%rs2888, %r347;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2844,%rs3133,%rs2888,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2847,%rs2844,c,%rs2463;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2850,%rs3139,%rs2888,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2853,%rs2850,c,%rs2469;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2856,%rs3145,%rs2888,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2859,%rs2856,c,%rs2475;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2862,%rs3151,%rs2888,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2865,%rs2862,c,%rs2481;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2868,%rs3157,%rs2888,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2871,%rs2868,c,%rs2487;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2874,%rs3163,%rs2888,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2877,%rs2874,c,%rs2493;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2880,%rs3169,%rs2888,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2883,%rs2880,c,%rs2499;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2886,%rs3175,%rs2888,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2889,%rs2886,c,%rs2505;}

	// end inline asm
	cvt.u16.u32 	%rs2936, %r275;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2892,%rs3175,%rs2936,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2895,%rs2892,c,%rs2511;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2898,%rs3169,%rs2936,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2901,%rs2898,c,%rs2517;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2904,%rs3163,%rs2936,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2907,%rs2904,c,%rs2523;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2910,%rs3157,%rs2936,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2913,%rs2910,c,%rs2529;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2916,%rs3151,%rs2936,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2919,%rs2916,c,%rs2535;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2922,%rs3145,%rs2936,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2925,%rs2922,c,%rs2541;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2928,%rs3139,%rs2936,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2931,%rs2928,c,%rs2547;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2934,%rs3133,%rs2936,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2937,%rs2934,c,%rs2553;}

	// end inline asm
	shr.u32 	%r348, %r275, 16;
	cvt.u16.u32 	%rs2984, %r348;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2940,%rs3133,%rs2984,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2943,%rs2940,c,%rs2559;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2946,%rs3139,%rs2984,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2949,%rs2946,c,%rs2565;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2952,%rs3145,%rs2984,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2955,%rs2952,c,%rs2571;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2958,%rs3151,%rs2984,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2961,%rs2958,c,%rs2577;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2964,%rs3157,%rs2984,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2967,%rs2964,c,%rs2583;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2970,%rs3163,%rs2984,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2973,%rs2970,c,%rs2589;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2976,%rs3169,%rs2984,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2979,%rs2976,c,%rs2595;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2982,%rs3175,%rs2984,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2985,%rs2982,c,%rs2601;}

	// end inline asm
	cvt.u16.u32 	%rs3032, %r276;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2988,%rs3175,%rs3032,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2991,%rs2988,c,%rs2607;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs2994,%rs3169,%rs3032,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs2997,%rs2994,c,%rs2613;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3000,%rs3163,%rs3032,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3003,%rs3000,c,%rs2619;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3006,%rs3157,%rs3032,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3009,%rs3006,c,%rs2625;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3012,%rs3151,%rs3032,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3015,%rs3012,c,%rs2631;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3018,%rs3145,%rs3032,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3021,%rs3018,c,%rs2637;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3024,%rs3139,%rs3032,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3027,%rs3024,c,%rs2643;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3030,%rs3133,%rs3032,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3033,%rs3030,c,%rs2649;}

	// end inline asm
	shr.u32 	%r349, %r276, 16;
	cvt.u16.u32 	%rs3080, %r349;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3036,%rs3133,%rs3080,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3039,%rs3036,c,%rs2655;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3042,%rs3139,%rs3080,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3045,%rs3042,c,%rs2661;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3048,%rs3145,%rs3080,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3051,%rs3048,c,%rs2667;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3054,%rs3151,%rs3080,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3057,%rs3054,c,%rs2673;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3060,%rs3157,%rs3080,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3063,%rs3060,c,%rs2679;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3066,%rs3163,%rs3080,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3069,%rs3066,c,%rs2685;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3072,%rs3169,%rs3080,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3075,%rs3072,c,%rs2691;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3078,%rs3175,%rs3080,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3081,%rs3078,c,%rs2697;}

	// end inline asm
	cvt.u16.u32 	%rs3128, %r277;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3084,%rs3175,%rs3128,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3087,%rs3084,c,%rs2703;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3090,%rs3169,%rs3128,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3093,%rs3090,c,%rs2709;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3096,%rs3163,%rs3128,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3099,%rs3096,c,%rs2715;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3102,%rs3157,%rs3128,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3105,%rs3102,c,%rs2721;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3108,%rs3151,%rs3128,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3111,%rs3108,c,%rs2727;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3114,%rs3145,%rs3128,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3117,%rs3114,c,%rs2733;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3120,%rs3139,%rs3128,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3123,%rs3120,c,%rs2739;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3126,%rs3133,%rs3128,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3129,%rs3126,c,%rs2745;}

	// end inline asm
	shr.u32 	%r350, %r277, 16;
	cvt.u16.u32 	%rs3176, %r350;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3132,%rs3133,%rs3176,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3135,%rs3132,c,%rs2751;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3138,%rs3139,%rs3176,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3141,%rs3138,c,%rs2757;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3144,%rs3145,%rs3176,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3147,%rs3144,c,%rs2763;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3150,%rs3151,%rs3176,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3153,%rs3150,c,%rs2769;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3156,%rs3157,%rs3176,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3159,%rs3156,c,%rs2775;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3162,%rs3163,%rs3176,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3165,%rs3162,c,%rs2781;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3168,%rs3169,%rs3176,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3171,%rs3168,c,%rs2787;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3174,%rs3175,%rs3176,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs3177,%rs3174,c,%rs2793;}

	// end inline asm
	st.shared.u16 	[%r677], %rs476;
	st.shared.u16 	[%r677+64], %rs478;
	st.shared.u16 	[%r677+128], %rs480;
	st.shared.u16 	[%r677+192], %rs482;
	st.shared.u16 	[%r678], %rs484;
	st.shared.u16 	[%r678+512], %rs486;
	st.shared.u16 	[%r678+1024], %rs488;
	st.shared.u16 	[%r678+1536], %rs490;
	bar.sync 	0;
	setp.eq.s32 	%p34, %r679, 1;
	@%p34 bra 	$L__BB0_5;
	bra.uni 	$L__BB0_4;

$L__BB0_5:
	add.s32 	%r682, %r676, 1792;
	add.s32 	%r683, %r675, 1904;
	mov.u32 	%r681, -2176;
	mov.u32 	%r680, -2048;
	bra.uni 	$L__BB0_6;

$L__BB0_4:
	add.s32 	%r683, %r675, -2448;
	add.s32 	%r682, %r676, -2304;
	mov.u32 	%r681, 2176;
	mov.u32 	%r680, 2048;

$L__BB0_6:
	setp.gt.s32 	%p35, %r664, 2;
	add.s32 	%r678, %r678, %r680;
	add.s32 	%r677, %r677, %r681;
	xor.b32  	%r679, %r679, 1;
	// begin inline asm
	ld.shared.v4.b32 {%r671, %r672, %r673, %r674}, [%r683];
	// end inline asm
	// begin inline asm
	ld.shared.v4.b32 {%r667, %r668, %r669, %r670}, [%r682];
	// end inline asm
	add.s32 	%r675, %r683, 272;
	add.s32 	%r676, %r682, 256;
	cvt.u16.u32 	%rs3224, %r284;
	cvt.u16.u32 	%rs3559, %r279;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3180,%rs3559,%rs3224,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4588,%rs3180,c,%rs2799;}

	// end inline asm
	shr.u32 	%r365, %r279, 16;
	cvt.u16.u32 	%rs3553, %r365;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3186,%rs3553,%rs3224,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4580,%rs3186,c,%rs2805;}

	// end inline asm
	cvt.u16.u32 	%rs3547, %r280;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3192,%rs3547,%rs3224,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4572,%rs3192,c,%rs2811;}

	// end inline asm
	shr.u32 	%r366, %r280, 16;
	cvt.u16.u32 	%rs3541, %r366;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3198,%rs3541,%rs3224,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4564,%rs3198,c,%rs2817;}

	// end inline asm
	cvt.u16.u32 	%rs3535, %r281;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3204,%rs3535,%rs3224,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4556,%rs3204,c,%rs2823;}

	// end inline asm
	shr.u32 	%r367, %r281, 16;
	cvt.u16.u32 	%rs3529, %r367;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3210,%rs3529,%rs3224,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4548,%rs3210,c,%rs2829;}

	// end inline asm
	cvt.u16.u32 	%rs3523, %r282;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3216,%rs3523,%rs3224,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4540,%rs3216,c,%rs2835;}

	// end inline asm
	shr.u32 	%r368, %r282, 16;
	cvt.u16.u32 	%rs3517, %r368;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3222,%rs3517,%rs3224,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4532,%rs3222,c,%rs2841;}

	// end inline asm
	shr.u32 	%r369, %r284, 16;
	cvt.u16.u32 	%rs3272, %r369;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3228,%rs3517,%rs3272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4533,%rs3228,c,%rs2847;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3234,%rs3523,%rs3272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4541,%rs3234,c,%rs2853;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3240,%rs3529,%rs3272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4549,%rs3240,c,%rs2859;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3246,%rs3535,%rs3272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4557,%rs3246,c,%rs2865;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3252,%rs3541,%rs3272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4565,%rs3252,c,%rs2871;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3258,%rs3547,%rs3272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4573,%rs3258,c,%rs2877;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3264,%rs3553,%rs3272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4581,%rs3264,c,%rs2883;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3270,%rs3559,%rs3272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4589,%rs3270,c,%rs2889;}

	// end inline asm
	cvt.u16.u32 	%rs3320, %r285;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3276,%rs3559,%rs3320,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4586,%rs3276,c,%rs2895;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3282,%rs3553,%rs3320,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4578,%rs3282,c,%rs2901;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3288,%rs3547,%rs3320,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4570,%rs3288,c,%rs2907;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3294,%rs3541,%rs3320,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4562,%rs3294,c,%rs2913;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3300,%rs3535,%rs3320,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4554,%rs3300,c,%rs2919;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3306,%rs3529,%rs3320,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4546,%rs3306,c,%rs2925;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3312,%rs3523,%rs3320,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4538,%rs3312,c,%rs2931;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3318,%rs3517,%rs3320,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4530,%rs3318,c,%rs2937;}

	// end inline asm
	shr.u32 	%r370, %r285, 16;
	cvt.u16.u32 	%rs3368, %r370;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3324,%rs3517,%rs3368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4531,%rs3324,c,%rs2943;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3330,%rs3523,%rs3368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4539,%rs3330,c,%rs2949;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3336,%rs3529,%rs3368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4547,%rs3336,c,%rs2955;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3342,%rs3535,%rs3368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4555,%rs3342,c,%rs2961;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3348,%rs3541,%rs3368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4563,%rs3348,c,%rs2967;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3354,%rs3547,%rs3368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4571,%rs3354,c,%rs2973;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3360,%rs3553,%rs3368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4579,%rs3360,c,%rs2979;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3366,%rs3559,%rs3368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4587,%rs3366,c,%rs2985;}

	// end inline asm
	cvt.u16.u32 	%rs3416, %r286;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3372,%rs3559,%rs3416,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4584,%rs3372,c,%rs2991;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3378,%rs3553,%rs3416,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4576,%rs3378,c,%rs2997;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3384,%rs3547,%rs3416,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4568,%rs3384,c,%rs3003;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3390,%rs3541,%rs3416,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4560,%rs3390,c,%rs3009;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3396,%rs3535,%rs3416,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4552,%rs3396,c,%rs3015;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3402,%rs3529,%rs3416,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4544,%rs3402,c,%rs3021;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3408,%rs3523,%rs3416,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4536,%rs3408,c,%rs3027;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3414,%rs3517,%rs3416,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4528,%rs3414,c,%rs3033;}

	// end inline asm
	shr.u32 	%r371, %r286, 16;
	cvt.u16.u32 	%rs3464, %r371;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3420,%rs3517,%rs3464,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4529,%rs3420,c,%rs3039;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3426,%rs3523,%rs3464,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4537,%rs3426,c,%rs3045;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3432,%rs3529,%rs3464,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4545,%rs3432,c,%rs3051;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3438,%rs3535,%rs3464,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4553,%rs3438,c,%rs3057;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3444,%rs3541,%rs3464,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4561,%rs3444,c,%rs3063;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3450,%rs3547,%rs3464,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4569,%rs3450,c,%rs3069;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3456,%rs3553,%rs3464,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4577,%rs3456,c,%rs3075;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3462,%rs3559,%rs3464,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4585,%rs3462,c,%rs3081;}

	// end inline asm
	cvt.u16.u32 	%rs3512, %r287;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3468,%rs3559,%rs3512,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4582,%rs3468,c,%rs3087;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3474,%rs3553,%rs3512,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4574,%rs3474,c,%rs3093;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3480,%rs3547,%rs3512,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4566,%rs3480,c,%rs3099;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3486,%rs3541,%rs3512,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4558,%rs3486,c,%rs3105;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3492,%rs3535,%rs3512,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4550,%rs3492,c,%rs3111;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3498,%rs3529,%rs3512,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4542,%rs3498,c,%rs3117;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3504,%rs3523,%rs3512,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4534,%rs3504,c,%rs3123;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3510,%rs3517,%rs3512,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4526,%rs3510,c,%rs3129;}

	// end inline asm
	shr.u32 	%r372, %r287, 16;
	cvt.u16.u32 	%rs3560, %r372;
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3516,%rs3517,%rs3560,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4527,%rs3516,c,%rs3135;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3522,%rs3523,%rs3560,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4535,%rs3522,c,%rs3141;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3528,%rs3529,%rs3560,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4543,%rs3528,c,%rs3147;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3534,%rs3535,%rs3560,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4551,%rs3534,c,%rs3153;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3540,%rs3541,%rs3560,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4559,%rs3540,c,%rs3159;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3546,%rs3547,%rs3560,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4567,%rs3546,c,%rs3165;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3552,%rs3553,%rs3560,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4575,%rs3552,c,%rs3171;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3558,%rs3559,%rs3560,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x3f80U;
  fma.rn.bf16 %rs4583,%rs3558,c,%rs3177;}

	// end inline asm
	add.s64 	%rd71, %rd7, %rd58;
	add.s64 	%rd311, %rd311, %rd71;
	add.s64 	%rd73, %rd3, %rd60;
	add.s64 	%rd310, %rd310, %rd73;
	setp.gt.s32 	%p36, %r664, 1;
	selp.b32 	%r665, %r665, 0, %p35;
	selp.b32 	%r666, %r666, 0, %p35;
	@%p36 bra 	$L__BB0_3;

$L__BB0_7:
	mov.b64 	%rd303, _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0;
	ld.param.u64 	%rd23, [%rd303+312];
	setp.eq.s64 	%p37, %rd23, 0;
	@%p37 bra 	$L__BB0_10;

	cvta.to.global.u64 	%rd75, %rd23;
	ld.global.u64 	%rd24, [%rd75];
	setp.eq.s64 	%p38, %rd24, 0;
	@%p38 bra 	$L__BB0_10;

	ld.u16 	%rs4590, [%rd24];
	bra.uni 	$L__BB0_13;

$L__BB0_10:
	mov.b64 	%rd308, _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0;
	ld.param.u64 	%rd25, [%rd308+296];
	setp.eq.s64 	%p39, %rd25, 0;
	@%p39 bra 	$L__BB0_12;

	cvta.to.global.u64 	%rd77, %rd25;
	ld.global.u16 	%rs4590, [%rd77];
	bra.uni 	$L__BB0_13;

$L__BB0_12:
	mov.b64 	%rd309, _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0;
	ld.param.u16 	%rs4590, [%rd309+288];

$L__BB0_13:
	mov.b64 	%rd304, _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0;
	ld.param.u64 	%rd26, [%rd304+320];
	setp.eq.s64 	%p40, %rd26, 0;
	@%p40 bra 	$L__BB0_16;

	cvta.to.global.u64 	%rd80, %rd26;
	ld.global.u64 	%rd27, [%rd80];
	setp.eq.s64 	%p41, %rd27, 0;
	@%p41 bra 	$L__BB0_16;

	ld.u16 	%rs4591, [%rd27];
	bra.uni 	$L__BB0_19;

$L__BB0_16:
	mov.b64 	%rd306, _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0;
	ld.param.u64 	%rd28, [%rd306+304];
	setp.eq.s64 	%p42, %rd28, 0;
	@%p42 bra 	$L__BB0_18;

	cvta.to.global.u64 	%rd82, %rd28;
	ld.global.u16 	%rs4591, [%rd82];
	bra.uni 	$L__BB0_19;

$L__BB0_18:
	mov.b64 	%rd307, _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0;
	ld.param.u16 	%rs4591, [%rd307+290];

$L__BB0_19:
	ld.param.u32 	%r663, [_ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0+24];
	ld.param.u32 	%r662, [_ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0+24];
	mov.u32 	%r661, %tid.x;
	mov.u32 	%r660, %tid.x;
	mov.u32 	%r659, _ZN7cutlass17SharedStorageBaseE;
	and.b32  	%r658, %r660, 31;
	and.b32  	%r657, %r660, 1;
	shr.u32 	%r656, %r658, 4;
	bfi.b32 	%r655, %r656, %r657, 1, 31;
	mov.u32 	%r654, %ctaid.y;
	shl.b32 	%r653, %r654, %r662;
	mov.u32 	%r652, %ctaid.x;
	mov.u32 	%r651, %ctaid.x;
	shr.s32 	%r650, %r651, %r662;
	shl.b32 	%r649, %r650, 7;
	shr.s32 	%r648, %r660, 31;
	mov.b64 	%rd305, _ZN7cutlass6KernelINS_4gemm6kernel4GemmINS1_11threadblock12MmaPipelinedINS1_9GemmShapeILi128ELi128ELi8EEENS_9transform11threadblock22PredicatedTileIteratorINS_11MatrixShapeILi128ELi8EEENS_10bfloat16_tENS_6layout8RowMajorELi1ENS8_30PitchLinearStripminedThreadMapINS_16PitchLinearShapeILi8ELi128EEELi256ELi1EEELi1ELb0ENSE_9NoPermuteEEENS9_19RegularTileIteratorISC_SD_NSE_11ColumnMajorELi1ENS8_33TransposePitchLinearThreadMapSimtISJ_EELi2EEENSA_INSB_ILi8ELi128EEESD_SF_Li0ENSG_INSH_ILi128ELi8EEELi256ELi1EEELi1ELb0ESK_EENSM_ISR_SD_SF_Li0EST_Li2EEESD_SF_NS4_9MmaPolicyINS1_4warp7MmaSimtINS6_ILi32ELi64ELi8EEESD_SN_SD_SF_SD_SF_NSX_13MmaSimtPolicyINSB_ILi4ELi8EEENSE_19RowMajorInterleavedILi2EEENS6_ILi8ELi8ELi1EEEEELi1ELNS_16ComplexTransformE0ELS16_0EbEENSB_ILi8ELi0EEENSB_ILi0ELi0EEELi1EEENS_21NumericArrayConverterISD_SD_Li4ELNS_15FloatRoundStyleE2ENS8_6thread14UnaryTransform8IdentityEEES1G_bEENS_8epilogue11threadblock8EpilogueIS7_S17_Li1ENS1J_22PredicatedTileIteratorINS1J_26OutputTileOptimalThreadMapINS1J_15OutputTileShapeILi128ELi1ELi4ELi4ELi1EEENS1N_ILi1ELi8ELi1ELi1ELi8EEELi256ELi1ELi16EEESD_Lb0ESK_Lb0EEENS1I_4warp20FragmentIteratorSimtISZ_NS1_6thread3MmaIS14_SD_SN_SD_SF_SD_SF_NS_4arch13OpMultiplyAddEbEESF_S15_EENS1S_16TileIteratorSimtISZ_S1Y_SD_SF_S15_EENS1J_18SharedLoadIteratorINS1Q_18CompactedThreadMapESD_Li2EEENS1I_6thread17LinearCombinationISD_Li1ESD_SD_LNS25_9ScaleType4KindE0ELS1C_2ESD_EENSB_ILi0ELi33EEELi1ELi1EEENS4_30GemmIdentityThreadblockSwizzleILi1EEELb0EEEEEvNT_6ParamsE_param_0;
	ld.param.u64 	%rd29, [%rd305+144];
	ld.param.u64 	%rd30, [%rd305+160];
	shr.u32 	%r376, %r648, 27;
	add.s32 	%r377, %r660, %r376;
	and.b32  	%r378, %r377, -32;
	sub.s32 	%r379, %r660, %r378;
	shr.u32 	%r380, %r648, 26;
	add.s32 	%r381, %r660, %r380;
	shr.s32 	%r382, %r381, 6;
	shr.u32 	%r383, %r377, 31;
	shr.s32 	%r384, %r377, 5;
	add.s32 	%r385, %r384, %r383;
	and.b32  	%r386, %r385, -2;
	sub.s32 	%r387, %r384, %r386;
	shl.b32 	%r388, %r382, 5;
	shl.b32 	%r389, %r387, 3;
	add.s32 	%r390, %r389, %r388;
	add.s32 	%r85, %r649, %r390;
	mov.u32 	%r394, -1;
	shl.b32 	%r395, %r394, %r662;
	not.b32 	%r396, %r395;
	and.b32  	%r397, %r651, %r396;
	add.s32 	%r400, %r397, %r653;
	shl.b32 	%r401, %r400, 7;
	add.s32 	%r402, %r401, %r379;
	setp.lt.s32 	%p43, %r402, %r122;
	add.s32 	%r403, %r402, 32;
	setp.lt.s32 	%p44, %r403, %r122;
	add.s32 	%r404, %r402, 64;
	setp.lt.s32 	%p45, %r404, %r122;
	add.s32 	%r405, %r402, 96;
	setp.lt.s32 	%p46, %r405, %r122;
	ld.param.u64 	%rd85, [%rd305+192];
	setp.ne.s64 	%p47, %rd85, 0;
	and.pred  	%p1, %p46, %p47;
	and.pred  	%p2, %p45, %p47;
	and.pred  	%p3, %p44, %p47;
	and.pred  	%p4, %p43, %p47;
	cvt.s64.s32 	%rd86, %r85;
	ld.param.u64 	%rd87, [%rd305+128];
	mul.lo.s64 	%rd88, %rd87, %rd86;
	mul.wide.s32 	%rd89, %r402, 2;
	add.s64 	%rd90, %rd88, %rd89;
	add.s64 	%rd31, %rd85, %rd90;
	ld.param.u64 	%rd32, [%rd305+224];
	ld.param.u64 	%rd33, [%rd305+240];
	ld.param.u64 	%rd91, [%rd305+272];
	setp.ne.s64 	%p48, %rd91, 0;
	and.pred  	%p5, %p46, %p48;
	and.pred  	%p6, %p45, %p48;
	and.pred  	%p7, %p44, %p48;
	and.pred  	%p8, %p43, %p48;
	ld.param.u64 	%rd92, [%rd305+208];
	mul.lo.s64 	%rd93, %rd92, %rd86;
	add.s64 	%rd94, %rd93, %rd89;
	add.s64 	%rd34, %rd91, %rd94;
	shl.b32 	%r406, %r8, 2;
	add.s32 	%r407, %r406, %r9;
	shl.b32 	%r408, %r407, 2;
	or.b32  	%r413, %r408, %r655;
	cvt.u64.u32 	%rd95, %r413;
	mul.lo.s64 	%rd96, %rd95, 161;
	shl.b32 	%r414, %r660, 2;
	and.b32  	%r415, %r414, 56;
	shl.b32 	%r416, %r10, 6;
	or.b32  	%r417, %r416, %r415;
	cvt.u64.u32 	%rd97, %r417;
	add.s64 	%rd98, %rd96, %rd97;
	shl.b32 	%r418, %r382, 2;
	add.s32 	%r419, %r418, %r387;
	mul.lo.s32 	%r420, %r419, 322;
	cvt.u64.u32 	%rd99, %r420;
	shl.b32 	%r421, %r379, 1;
	cvt.u64.u32 	%rd100, %r421;
	add.s64 	%rd101, %rd100, %rd99;
	mov.u16 	%rs3565, 0;
	// begin inline asm
	{.reg .b32 a,b;
  mov.b32 a, {0, %rs4591};
  mov.b32 b, {0, %rs3565};
  set.ne.f32.f32 %r373, a, b;}

	// end inline asm
	setp.eq.s32 	%p49, %r373, 0;
	cvt.u32.u64 	%r422, %rd98;
	shl.b32 	%r423, %r422, 1;
	add.s32 	%r86, %r659, %r423;
	cvt.u32.u64 	%r425, %rd101;
	add.s32 	%r87, %r659, %r425;
	@%p49 bra 	$L__BB0_21;

	setp.lt.s32 	%p50, %r85, %r121;
	and.pred  	%p51, %p50, %p4;
	selp.u32 	%r426, 1, 0, %p51;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r426, 0;
  mov.b16 %rs3566, %rs3565;
  @p ld.global.L2::128B.u16 %rs3566, [%rd31];
}

	// end inline asm
	and.pred  	%p52, %p50, %p3;
	selp.u32 	%r427, 1, 0, %p52;
	add.s64 	%rd103, %rd31, 64;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r427, 0;
  mov.b16 %rs3568, %rs3565;
  @p ld.global.L2::128B.u16 %rs3568, [%rd103];
}

	// end inline asm
	and.pred  	%p53, %p50, %p2;
	selp.u32 	%r428, 1, 0, %p53;
	add.s64 	%rd104, %rd31, 128;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r428, 0;
  mov.b16 %rs3570, %rs3565;
  @p ld.global.L2::128B.u16 %rs3570, [%rd104];
}

	// end inline asm
	and.pred  	%p54, %p50, %p1;
	selp.u32 	%r429, 1, 0, %p54;
	add.s64 	%rd105, %rd31, 192;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r429, 0;
  mov.b16 %rs3572, %rs3565;
  @p ld.global.L2::128B.u16 %rs3572, [%rd105];
}

	// end inline asm
	add.s32 	%r554, %r85, 16;
	setp.lt.s32 	%p55, %r554, %r121;
	and.pred  	%p56, %p55, %p4;
	selp.u32 	%r430, 1, 0, %p56;
	add.s64 	%rd106, %rd31, %rd29;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r430, 0;
  mov.b16 %rs3574, %rs3565;
  @p ld.global.L2::128B.u16 %rs3574, [%rd106];
}

	// end inline asm
	and.pred  	%p57, %p55, %p3;
	add.s64 	%rd107, %rd106, 64;
	selp.u32 	%r431, 1, 0, %p57;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r431, 0;
  mov.b16 %rs3576, %rs3565;
  @p ld.global.L2::128B.u16 %rs3576, [%rd107];
}

	// end inline asm
	and.pred  	%p58, %p55, %p2;
	add.s64 	%rd108, %rd106, 128;
	selp.u32 	%r432, 1, 0, %p58;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r432, 0;
  mov.b16 %rs3578, %rs3565;
  @p ld.global.L2::128B.u16 %rs3578, [%rd108];
}

	// end inline asm
	and.pred  	%p59, %p55, %p1;
	add.s64 	%rd109, %rd106, 192;
	selp.u32 	%r433, 1, 0, %p59;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r433, 0;
  mov.b16 %rs3580, %rs3565;
  @p ld.global.L2::128B.u16 %rs3580, [%rd109];
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4588;
	st.shared.u16 	[%r86+2], %rs4589;
	st.shared.u16 	[%r86+4], %rs4586;
	st.shared.u16 	[%r86+6], %rs4587;
	st.shared.u16 	[%r86+8], %rs4584;
	st.shared.u16 	[%r86+10], %rs4585;
	st.shared.u16 	[%r86+12], %rs4582;
	st.shared.u16 	[%r86+14], %rs4583;
	bar.sync 	0;
	ld.shared.u16 	%rs3587, [%r87];
	ld.shared.u16 	%rs3594, [%r87+64];
	ld.shared.u16 	%rs3601, [%r87+128];
	ld.shared.u16 	%rs3608, [%r87+192];
	ld.shared.u16 	%rs3615, [%r87+644];
	ld.shared.u16 	%rs3622, [%r87+708];
	ld.shared.u16 	%rs3629, [%r87+772];
	ld.shared.u16 	%rs3636, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3582,%rs4591,%rs3566,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3585, %rs4590, %rs3587, %rs3582;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3589,%rs4591,%rs3568,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3592, %rs4590, %rs3594, %rs3589;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3596,%rs4591,%rs3570,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3599, %rs4590, %rs3601, %rs3596;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3603,%rs4591,%rs3572,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3606, %rs4590, %rs3608, %rs3603;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3610,%rs4591,%rs3574,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3613, %rs4590, %rs3615, %rs3610;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3617,%rs4591,%rs3576,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3620, %rs4590, %rs3622, %rs3617;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3624,%rs4591,%rs3578,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3627, %rs4590, %rs3629, %rs3624;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3631,%rs4591,%rs3580,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3634, %rs4590, %rs3636, %rs3631;

	// end inline asm
	and.pred  	%p60, %p50, %p8;
	selp.u32 	%r434, 1, 0, %p60;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r434, 0;
  @p st.global.u16 [%rd34], %rs3585;
}

	// end inline asm
	and.pred  	%p61, %p50, %p7;
	selp.u32 	%r435, 1, 0, %p61;
	add.s64 	%rd111, %rd34, 64;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r435, 0;
  @p st.global.u16 [%rd111], %rs3592;
}

	// end inline asm
	and.pred  	%p62, %p50, %p6;
	selp.u32 	%r436, 1, 0, %p62;
	add.s64 	%rd112, %rd34, 128;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r436, 0;
  @p st.global.u16 [%rd112], %rs3599;
}

	// end inline asm
	and.pred  	%p63, %p50, %p5;
	selp.u32 	%r437, 1, 0, %p63;
	add.s64 	%rd113, %rd34, 192;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r437, 0;
  @p st.global.u16 [%rd113], %rs3606;
}

	// end inline asm
	and.pred  	%p64, %p55, %p8;
	selp.u32 	%r438, 1, 0, %p64;
	add.s64 	%rd114, %rd34, %rd32;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r438, 0;
  @p st.global.u16 [%rd114], %rs3613;
}

	// end inline asm
	add.s64 	%rd115, %rd114, 64;
	and.pred  	%p65, %p55, %p7;
	selp.u32 	%r439, 1, 0, %p65;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r439, 0;
  @p st.global.u16 [%rd115], %rs3620;
}

	// end inline asm
	add.s64 	%rd116, %rd114, 128;
	and.pred  	%p66, %p55, %p6;
	selp.u32 	%r440, 1, 0, %p66;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r440, 0;
  @p st.global.u16 [%rd116], %rs3627;
}

	// end inline asm
	add.s64 	%rd117, %rd114, 192;
	and.pred  	%p67, %p55, %p5;
	selp.u32 	%r441, 1, 0, %p67;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r441, 0;
  @p st.global.u16 [%rd117], %rs3634;
}

	// end inline asm
	add.s32 	%r555, %r85, 1;
	setp.lt.s32 	%p68, %r555, %r121;
	and.pred  	%p69, %p68, %p4;
	selp.u32 	%r442, 1, 0, %p69;
	add.s64 	%rd118, %rd31, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r442, 0;
  mov.b16 %rs3646, %rs3566;
  @p ld.global.L2::128B.u16 %rs3646, [%rd118];
}

	// end inline asm
	and.pred  	%p70, %p68, %p3;
	selp.u32 	%r443, 1, 0, %p70;
	add.s64 	%rd230, %rd30, 64;
	add.s64 	%rd119, %rd31, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r443, 0;
  mov.b16 %rs3648, %rs3568;
  @p ld.global.L2::128B.u16 %rs3648, [%rd119];
}

	// end inline asm
	and.pred  	%p71, %p68, %p2;
	selp.u32 	%r444, 1, 0, %p71;
	add.s64 	%rd231, %rd30, 128;
	add.s64 	%rd120, %rd31, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r444, 0;
  mov.b16 %rs3650, %rs3570;
  @p ld.global.L2::128B.u16 %rs3650, [%rd120];
}

	// end inline asm
	and.pred  	%p72, %p68, %p1;
	selp.u32 	%r445, 1, 0, %p72;
	add.s64 	%rd232, %rd30, 192;
	add.s64 	%rd121, %rd31, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r445, 0;
  mov.b16 %rs3652, %rs3572;
  @p ld.global.L2::128B.u16 %rs3652, [%rd121];
}

	// end inline asm
	add.s32 	%r556, %r85, 17;
	setp.lt.s32 	%p73, %r556, %r121;
	and.pred  	%p74, %p73, %p4;
	selp.u32 	%r446, 1, 0, %p74;
	add.s64 	%rd122, %rd106, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r446, 0;
  mov.b16 %rs3654, %rs3574;
  @p ld.global.L2::128B.u16 %rs3654, [%rd122];
}

	// end inline asm
	and.pred  	%p75, %p73, %p3;
	selp.u32 	%r447, 1, 0, %p75;
	add.s64 	%rd123, %rd106, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r447, 0;
  mov.b16 %rs3656, %rs3576;
  @p ld.global.L2::128B.u16 %rs3656, [%rd123];
}

	// end inline asm
	and.pred  	%p76, %p73, %p2;
	selp.u32 	%r448, 1, 0, %p76;
	add.s64 	%rd124, %rd106, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r448, 0;
  mov.b16 %rs3658, %rs3578;
  @p ld.global.L2::128B.u16 %rs3658, [%rd124];
}

	// end inline asm
	and.pred  	%p77, %p73, %p1;
	selp.u32 	%r449, 1, 0, %p77;
	add.s64 	%rd125, %rd106, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r449, 0;
  mov.b16 %rs3660, %rs3580;
  @p ld.global.L2::128B.u16 %rs3660, [%rd125];
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4580;
	st.shared.u16 	[%r86+2], %rs4581;
	st.shared.u16 	[%r86+4], %rs4578;
	st.shared.u16 	[%r86+6], %rs4579;
	st.shared.u16 	[%r86+8], %rs4576;
	st.shared.u16 	[%r86+10], %rs4577;
	st.shared.u16 	[%r86+12], %rs4574;
	st.shared.u16 	[%r86+14], %rs4575;
	bar.sync 	0;
	ld.shared.u16 	%rs3667, [%r87];
	ld.shared.u16 	%rs3674, [%r87+64];
	ld.shared.u16 	%rs3681, [%r87+128];
	ld.shared.u16 	%rs3688, [%r87+192];
	ld.shared.u16 	%rs3695, [%r87+644];
	ld.shared.u16 	%rs3702, [%r87+708];
	ld.shared.u16 	%rs3709, [%r87+772];
	ld.shared.u16 	%rs3716, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3662,%rs4591,%rs3646,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3665, %rs4590, %rs3667, %rs3662;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3669,%rs4591,%rs3648,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3672, %rs4590, %rs3674, %rs3669;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3676,%rs4591,%rs3650,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3679, %rs4590, %rs3681, %rs3676;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3683,%rs4591,%rs3652,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3686, %rs4590, %rs3688, %rs3683;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3690,%rs4591,%rs3654,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3693, %rs4590, %rs3695, %rs3690;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3697,%rs4591,%rs3656,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3700, %rs4590, %rs3702, %rs3697;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3704,%rs4591,%rs3658,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3707, %rs4590, %rs3709, %rs3704;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3711,%rs4591,%rs3660,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3714, %rs4590, %rs3716, %rs3711;

	// end inline asm
	and.pred  	%p78, %p68, %p8;
	selp.u32 	%r450, 1, 0, %p78;
	add.s64 	%rd126, %rd34, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r450, 0;
  @p st.global.u16 [%rd126], %rs3665;
}

	// end inline asm
	and.pred  	%p79, %p68, %p7;
	selp.u32 	%r451, 1, 0, %p79;
	add.s64 	%rd233, %rd33, 64;
	add.s64 	%rd127, %rd34, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r451, 0;
  @p st.global.u16 [%rd127], %rs3672;
}

	// end inline asm
	and.pred  	%p80, %p68, %p6;
	selp.u32 	%r452, 1, 0, %p80;
	add.s64 	%rd234, %rd33, 128;
	add.s64 	%rd128, %rd34, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r452, 0;
  @p st.global.u16 [%rd128], %rs3679;
}

	// end inline asm
	and.pred  	%p81, %p68, %p5;
	selp.u32 	%r453, 1, 0, %p81;
	add.s64 	%rd235, %rd33, 192;
	add.s64 	%rd129, %rd34, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r453, 0;
  @p st.global.u16 [%rd129], %rs3686;
}

	// end inline asm
	and.pred  	%p82, %p73, %p8;
	selp.u32 	%r454, 1, 0, %p82;
	add.s64 	%rd130, %rd114, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r454, 0;
  @p st.global.u16 [%rd130], %rs3693;
}

	// end inline asm
	and.pred  	%p83, %p73, %p7;
	selp.u32 	%r455, 1, 0, %p83;
	add.s64 	%rd131, %rd114, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r455, 0;
  @p st.global.u16 [%rd131], %rs3700;
}

	// end inline asm
	and.pred  	%p84, %p73, %p6;
	selp.u32 	%r456, 1, 0, %p84;
	add.s64 	%rd132, %rd114, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r456, 0;
  @p st.global.u16 [%rd132], %rs3707;
}

	// end inline asm
	and.pred  	%p85, %p73, %p5;
	selp.u32 	%r457, 1, 0, %p85;
	add.s64 	%rd133, %rd114, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r457, 0;
  @p st.global.u16 [%rd133], %rs3714;
}

	// end inline asm
	add.s32 	%r557, %r85, 2;
	setp.lt.s32 	%p86, %r557, %r121;
	and.pred  	%p87, %p86, %p4;
	selp.u32 	%r458, 1, 0, %p87;
	add.s64 	%rd134, %rd118, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r458, 0;
  mov.b16 %rs3726, %rs3646;
  @p ld.global.L2::128B.u16 %rs3726, [%rd134];
}

	// end inline asm
	and.pred  	%p88, %p86, %p3;
	selp.u32 	%r459, 1, 0, %p88;
	add.s64 	%rd135, %rd118, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r459, 0;
  mov.b16 %rs3728, %rs3648;
  @p ld.global.L2::128B.u16 %rs3728, [%rd135];
}

	// end inline asm
	and.pred  	%p89, %p86, %p2;
	selp.u32 	%r460, 1, 0, %p89;
	add.s64 	%rd136, %rd118, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r460, 0;
  mov.b16 %rs3730, %rs3650;
  @p ld.global.L2::128B.u16 %rs3730, [%rd136];
}

	// end inline asm
	and.pred  	%p90, %p86, %p1;
	selp.u32 	%r461, 1, 0, %p90;
	add.s64 	%rd137, %rd118, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r461, 0;
  mov.b16 %rs3732, %rs3652;
  @p ld.global.L2::128B.u16 %rs3732, [%rd137];
}

	// end inline asm
	add.s32 	%r558, %r85, 18;
	setp.lt.s32 	%p91, %r558, %r121;
	and.pred  	%p92, %p91, %p4;
	selp.u32 	%r462, 1, 0, %p92;
	add.s64 	%rd138, %rd122, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r462, 0;
  mov.b16 %rs3734, %rs3654;
  @p ld.global.L2::128B.u16 %rs3734, [%rd138];
}

	// end inline asm
	and.pred  	%p93, %p91, %p3;
	selp.u32 	%r463, 1, 0, %p93;
	add.s64 	%rd139, %rd122, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r463, 0;
  mov.b16 %rs3736, %rs3656;
  @p ld.global.L2::128B.u16 %rs3736, [%rd139];
}

	// end inline asm
	and.pred  	%p94, %p91, %p2;
	selp.u32 	%r464, 1, 0, %p94;
	add.s64 	%rd140, %rd122, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r464, 0;
  mov.b16 %rs3738, %rs3658;
  @p ld.global.L2::128B.u16 %rs3738, [%rd140];
}

	// end inline asm
	and.pred  	%p95, %p91, %p1;
	selp.u32 	%r465, 1, 0, %p95;
	add.s64 	%rd141, %rd122, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r465, 0;
  mov.b16 %rs3740, %rs3660;
  @p ld.global.L2::128B.u16 %rs3740, [%rd141];
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4572;
	st.shared.u16 	[%r86+2], %rs4573;
	st.shared.u16 	[%r86+4], %rs4570;
	st.shared.u16 	[%r86+6], %rs4571;
	st.shared.u16 	[%r86+8], %rs4568;
	st.shared.u16 	[%r86+10], %rs4569;
	st.shared.u16 	[%r86+12], %rs4566;
	st.shared.u16 	[%r86+14], %rs4567;
	bar.sync 	0;
	ld.shared.u16 	%rs3747, [%r87];
	ld.shared.u16 	%rs3754, [%r87+64];
	ld.shared.u16 	%rs3761, [%r87+128];
	ld.shared.u16 	%rs3768, [%r87+192];
	ld.shared.u16 	%rs3775, [%r87+644];
	ld.shared.u16 	%rs3782, [%r87+708];
	ld.shared.u16 	%rs3789, [%r87+772];
	ld.shared.u16 	%rs3796, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3742,%rs4591,%rs3726,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3745, %rs4590, %rs3747, %rs3742;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3749,%rs4591,%rs3728,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3752, %rs4590, %rs3754, %rs3749;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3756,%rs4591,%rs3730,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3759, %rs4590, %rs3761, %rs3756;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3763,%rs4591,%rs3732,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3766, %rs4590, %rs3768, %rs3763;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3770,%rs4591,%rs3734,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3773, %rs4590, %rs3775, %rs3770;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3777,%rs4591,%rs3736,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3780, %rs4590, %rs3782, %rs3777;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3784,%rs4591,%rs3738,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3787, %rs4590, %rs3789, %rs3784;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3791,%rs4591,%rs3740,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3794, %rs4590, %rs3796, %rs3791;

	// end inline asm
	and.pred  	%p96, %p86, %p8;
	selp.u32 	%r466, 1, 0, %p96;
	add.s64 	%rd142, %rd126, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r466, 0;
  @p st.global.u16 [%rd142], %rs3745;
}

	// end inline asm
	and.pred  	%p97, %p86, %p7;
	selp.u32 	%r467, 1, 0, %p97;
	add.s64 	%rd143, %rd126, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r467, 0;
  @p st.global.u16 [%rd143], %rs3752;
}

	// end inline asm
	and.pred  	%p98, %p86, %p6;
	selp.u32 	%r468, 1, 0, %p98;
	add.s64 	%rd144, %rd126, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r468, 0;
  @p st.global.u16 [%rd144], %rs3759;
}

	// end inline asm
	and.pred  	%p99, %p86, %p5;
	selp.u32 	%r469, 1, 0, %p99;
	add.s64 	%rd145, %rd126, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r469, 0;
  @p st.global.u16 [%rd145], %rs3766;
}

	// end inline asm
	and.pred  	%p100, %p91, %p8;
	selp.u32 	%r470, 1, 0, %p100;
	add.s64 	%rd146, %rd130, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r470, 0;
  @p st.global.u16 [%rd146], %rs3773;
}

	// end inline asm
	and.pred  	%p101, %p91, %p7;
	selp.u32 	%r471, 1, 0, %p101;
	add.s64 	%rd147, %rd130, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r471, 0;
  @p st.global.u16 [%rd147], %rs3780;
}

	// end inline asm
	and.pred  	%p102, %p91, %p6;
	selp.u32 	%r472, 1, 0, %p102;
	add.s64 	%rd148, %rd130, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r472, 0;
  @p st.global.u16 [%rd148], %rs3787;
}

	// end inline asm
	and.pred  	%p103, %p91, %p5;
	selp.u32 	%r473, 1, 0, %p103;
	add.s64 	%rd149, %rd130, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r473, 0;
  @p st.global.u16 [%rd149], %rs3794;
}

	// end inline asm
	add.s32 	%r559, %r85, 3;
	setp.lt.s32 	%p104, %r559, %r121;
	and.pred  	%p105, %p104, %p4;
	selp.u32 	%r474, 1, 0, %p105;
	add.s64 	%rd150, %rd134, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r474, 0;
  mov.b16 %rs3806, %rs3726;
  @p ld.global.L2::128B.u16 %rs3806, [%rd150];
}

	// end inline asm
	and.pred  	%p106, %p104, %p3;
	selp.u32 	%r475, 1, 0, %p106;
	add.s64 	%rd151, %rd134, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r475, 0;
  mov.b16 %rs3808, %rs3728;
  @p ld.global.L2::128B.u16 %rs3808, [%rd151];
}

	// end inline asm
	and.pred  	%p107, %p104, %p2;
	selp.u32 	%r476, 1, 0, %p107;
	add.s64 	%rd152, %rd134, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r476, 0;
  mov.b16 %rs3810, %rs3730;
  @p ld.global.L2::128B.u16 %rs3810, [%rd152];
}

	// end inline asm
	and.pred  	%p108, %p104, %p1;
	selp.u32 	%r477, 1, 0, %p108;
	add.s64 	%rd153, %rd134, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r477, 0;
  mov.b16 %rs3812, %rs3732;
  @p ld.global.L2::128B.u16 %rs3812, [%rd153];
}

	// end inline asm
	add.s32 	%r560, %r85, 19;
	setp.lt.s32 	%p109, %r560, %r121;
	and.pred  	%p110, %p109, %p4;
	selp.u32 	%r478, 1, 0, %p110;
	add.s64 	%rd154, %rd138, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r478, 0;
  mov.b16 %rs3814, %rs3734;
  @p ld.global.L2::128B.u16 %rs3814, [%rd154];
}

	// end inline asm
	and.pred  	%p111, %p109, %p3;
	selp.u32 	%r479, 1, 0, %p111;
	add.s64 	%rd155, %rd138, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r479, 0;
  mov.b16 %rs3816, %rs3736;
  @p ld.global.L2::128B.u16 %rs3816, [%rd155];
}

	// end inline asm
	and.pred  	%p112, %p109, %p2;
	selp.u32 	%r480, 1, 0, %p112;
	add.s64 	%rd156, %rd138, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r480, 0;
  mov.b16 %rs3818, %rs3738;
  @p ld.global.L2::128B.u16 %rs3818, [%rd156];
}

	// end inline asm
	and.pred  	%p113, %p109, %p1;
	selp.u32 	%r481, 1, 0, %p113;
	add.s64 	%rd157, %rd138, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r481, 0;
  mov.b16 %rs3820, %rs3740;
  @p ld.global.L2::128B.u16 %rs3820, [%rd157];
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4564;
	st.shared.u16 	[%r86+2], %rs4565;
	st.shared.u16 	[%r86+4], %rs4562;
	st.shared.u16 	[%r86+6], %rs4563;
	st.shared.u16 	[%r86+8], %rs4560;
	st.shared.u16 	[%r86+10], %rs4561;
	st.shared.u16 	[%r86+12], %rs4558;
	st.shared.u16 	[%r86+14], %rs4559;
	bar.sync 	0;
	ld.shared.u16 	%rs3827, [%r87];
	ld.shared.u16 	%rs3834, [%r87+64];
	ld.shared.u16 	%rs3841, [%r87+128];
	ld.shared.u16 	%rs3848, [%r87+192];
	ld.shared.u16 	%rs3855, [%r87+644];
	ld.shared.u16 	%rs3862, [%r87+708];
	ld.shared.u16 	%rs3869, [%r87+772];
	ld.shared.u16 	%rs3876, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3822,%rs4591,%rs3806,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3825, %rs4590, %rs3827, %rs3822;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3829,%rs4591,%rs3808,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3832, %rs4590, %rs3834, %rs3829;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3836,%rs4591,%rs3810,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3839, %rs4590, %rs3841, %rs3836;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3843,%rs4591,%rs3812,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3846, %rs4590, %rs3848, %rs3843;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3850,%rs4591,%rs3814,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3853, %rs4590, %rs3855, %rs3850;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3857,%rs4591,%rs3816,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3860, %rs4590, %rs3862, %rs3857;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3864,%rs4591,%rs3818,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3867, %rs4590, %rs3869, %rs3864;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3871,%rs4591,%rs3820,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3874, %rs4590, %rs3876, %rs3871;

	// end inline asm
	and.pred  	%p114, %p104, %p8;
	selp.u32 	%r482, 1, 0, %p114;
	add.s64 	%rd158, %rd142, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r482, 0;
  @p st.global.u16 [%rd158], %rs3825;
}

	// end inline asm
	and.pred  	%p115, %p104, %p7;
	selp.u32 	%r483, 1, 0, %p115;
	add.s64 	%rd159, %rd142, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r483, 0;
  @p st.global.u16 [%rd159], %rs3832;
}

	// end inline asm
	and.pred  	%p116, %p104, %p6;
	selp.u32 	%r484, 1, 0, %p116;
	add.s64 	%rd160, %rd142, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r484, 0;
  @p st.global.u16 [%rd160], %rs3839;
}

	// end inline asm
	and.pred  	%p117, %p104, %p5;
	selp.u32 	%r485, 1, 0, %p117;
	add.s64 	%rd161, %rd142, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r485, 0;
  @p st.global.u16 [%rd161], %rs3846;
}

	// end inline asm
	and.pred  	%p118, %p109, %p8;
	selp.u32 	%r486, 1, 0, %p118;
	add.s64 	%rd162, %rd146, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r486, 0;
  @p st.global.u16 [%rd162], %rs3853;
}

	// end inline asm
	and.pred  	%p119, %p109, %p7;
	selp.u32 	%r487, 1, 0, %p119;
	add.s64 	%rd163, %rd146, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r487, 0;
  @p st.global.u16 [%rd163], %rs3860;
}

	// end inline asm
	and.pred  	%p120, %p109, %p6;
	selp.u32 	%r488, 1, 0, %p120;
	add.s64 	%rd164, %rd146, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r488, 0;
  @p st.global.u16 [%rd164], %rs3867;
}

	// end inline asm
	and.pred  	%p121, %p109, %p5;
	selp.u32 	%r489, 1, 0, %p121;
	add.s64 	%rd165, %rd146, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r489, 0;
  @p st.global.u16 [%rd165], %rs3874;
}

	// end inline asm
	add.s32 	%r561, %r85, 4;
	setp.lt.s32 	%p122, %r561, %r121;
	and.pred  	%p123, %p122, %p4;
	selp.u32 	%r490, 1, 0, %p123;
	add.s64 	%rd166, %rd150, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r490, 0;
  mov.b16 %rs3886, %rs3806;
  @p ld.global.L2::128B.u16 %rs3886, [%rd166];
}

	// end inline asm
	and.pred  	%p124, %p122, %p3;
	selp.u32 	%r491, 1, 0, %p124;
	add.s64 	%rd167, %rd150, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r491, 0;
  mov.b16 %rs3888, %rs3808;
  @p ld.global.L2::128B.u16 %rs3888, [%rd167];
}

	// end inline asm
	and.pred  	%p125, %p122, %p2;
	selp.u32 	%r492, 1, 0, %p125;
	add.s64 	%rd168, %rd150, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r492, 0;
  mov.b16 %rs3890, %rs3810;
  @p ld.global.L2::128B.u16 %rs3890, [%rd168];
}

	// end inline asm
	and.pred  	%p126, %p122, %p1;
	selp.u32 	%r493, 1, 0, %p126;
	add.s64 	%rd169, %rd150, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r493, 0;
  mov.b16 %rs3892, %rs3812;
  @p ld.global.L2::128B.u16 %rs3892, [%rd169];
}

	// end inline asm
	add.s32 	%r562, %r85, 20;
	setp.lt.s32 	%p127, %r562, %r121;
	and.pred  	%p128, %p127, %p4;
	selp.u32 	%r494, 1, 0, %p128;
	add.s64 	%rd170, %rd154, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r494, 0;
  mov.b16 %rs3894, %rs3814;
  @p ld.global.L2::128B.u16 %rs3894, [%rd170];
}

	// end inline asm
	and.pred  	%p129, %p127, %p3;
	selp.u32 	%r495, 1, 0, %p129;
	add.s64 	%rd171, %rd154, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r495, 0;
  mov.b16 %rs3896, %rs3816;
  @p ld.global.L2::128B.u16 %rs3896, [%rd171];
}

	// end inline asm
	and.pred  	%p130, %p127, %p2;
	selp.u32 	%r496, 1, 0, %p130;
	add.s64 	%rd172, %rd154, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r496, 0;
  mov.b16 %rs3898, %rs3818;
  @p ld.global.L2::128B.u16 %rs3898, [%rd172];
}

	// end inline asm
	and.pred  	%p131, %p127, %p1;
	selp.u32 	%r497, 1, 0, %p131;
	add.s64 	%rd173, %rd154, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r497, 0;
  mov.b16 %rs3900, %rs3820;
  @p ld.global.L2::128B.u16 %rs3900, [%rd173];
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4556;
	st.shared.u16 	[%r86+2], %rs4557;
	st.shared.u16 	[%r86+4], %rs4554;
	st.shared.u16 	[%r86+6], %rs4555;
	st.shared.u16 	[%r86+8], %rs4552;
	st.shared.u16 	[%r86+10], %rs4553;
	st.shared.u16 	[%r86+12], %rs4550;
	st.shared.u16 	[%r86+14], %rs4551;
	bar.sync 	0;
	ld.shared.u16 	%rs3907, [%r87];
	ld.shared.u16 	%rs3914, [%r87+64];
	ld.shared.u16 	%rs3921, [%r87+128];
	ld.shared.u16 	%rs3928, [%r87+192];
	ld.shared.u16 	%rs3935, [%r87+644];
	ld.shared.u16 	%rs3942, [%r87+708];
	ld.shared.u16 	%rs3949, [%r87+772];
	ld.shared.u16 	%rs3956, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3902,%rs4591,%rs3886,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3905, %rs4590, %rs3907, %rs3902;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3909,%rs4591,%rs3888,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3912, %rs4590, %rs3914, %rs3909;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3916,%rs4591,%rs3890,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3919, %rs4590, %rs3921, %rs3916;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3923,%rs4591,%rs3892,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3926, %rs4590, %rs3928, %rs3923;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3930,%rs4591,%rs3894,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3933, %rs4590, %rs3935, %rs3930;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3937,%rs4591,%rs3896,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3940, %rs4590, %rs3942, %rs3937;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3944,%rs4591,%rs3898,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3947, %rs4590, %rs3949, %rs3944;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3951,%rs4591,%rs3900,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3954, %rs4590, %rs3956, %rs3951;

	// end inline asm
	and.pred  	%p132, %p122, %p8;
	selp.u32 	%r498, 1, 0, %p132;
	add.s64 	%rd174, %rd158, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r498, 0;
  @p st.global.u16 [%rd174], %rs3905;
}

	// end inline asm
	and.pred  	%p133, %p122, %p7;
	selp.u32 	%r499, 1, 0, %p133;
	add.s64 	%rd175, %rd158, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r499, 0;
  @p st.global.u16 [%rd175], %rs3912;
}

	// end inline asm
	and.pred  	%p134, %p122, %p6;
	selp.u32 	%r500, 1, 0, %p134;
	add.s64 	%rd176, %rd158, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r500, 0;
  @p st.global.u16 [%rd176], %rs3919;
}

	// end inline asm
	and.pred  	%p135, %p122, %p5;
	selp.u32 	%r501, 1, 0, %p135;
	add.s64 	%rd177, %rd158, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r501, 0;
  @p st.global.u16 [%rd177], %rs3926;
}

	// end inline asm
	and.pred  	%p136, %p127, %p8;
	selp.u32 	%r502, 1, 0, %p136;
	add.s64 	%rd178, %rd162, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r502, 0;
  @p st.global.u16 [%rd178], %rs3933;
}

	// end inline asm
	and.pred  	%p137, %p127, %p7;
	selp.u32 	%r503, 1, 0, %p137;
	add.s64 	%rd179, %rd162, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r503, 0;
  @p st.global.u16 [%rd179], %rs3940;
}

	// end inline asm
	and.pred  	%p138, %p127, %p6;
	selp.u32 	%r504, 1, 0, %p138;
	add.s64 	%rd180, %rd162, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r504, 0;
  @p st.global.u16 [%rd180], %rs3947;
}

	// end inline asm
	and.pred  	%p139, %p127, %p5;
	selp.u32 	%r505, 1, 0, %p139;
	add.s64 	%rd181, %rd162, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r505, 0;
  @p st.global.u16 [%rd181], %rs3954;
}

	// end inline asm
	add.s32 	%r563, %r85, 5;
	setp.lt.s32 	%p140, %r563, %r121;
	and.pred  	%p141, %p140, %p4;
	selp.u32 	%r506, 1, 0, %p141;
	add.s64 	%rd182, %rd166, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r506, 0;
  mov.b16 %rs3966, %rs3886;
  @p ld.global.L2::128B.u16 %rs3966, [%rd182];
}

	// end inline asm
	and.pred  	%p142, %p140, %p3;
	selp.u32 	%r507, 1, 0, %p142;
	add.s64 	%rd183, %rd166, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r507, 0;
  mov.b16 %rs3968, %rs3888;
  @p ld.global.L2::128B.u16 %rs3968, [%rd183];
}

	// end inline asm
	and.pred  	%p143, %p140, %p2;
	selp.u32 	%r508, 1, 0, %p143;
	add.s64 	%rd184, %rd166, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r508, 0;
  mov.b16 %rs3970, %rs3890;
  @p ld.global.L2::128B.u16 %rs3970, [%rd184];
}

	// end inline asm
	and.pred  	%p144, %p140, %p1;
	selp.u32 	%r509, 1, 0, %p144;
	add.s64 	%rd185, %rd166, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r509, 0;
  mov.b16 %rs3972, %rs3892;
  @p ld.global.L2::128B.u16 %rs3972, [%rd185];
}

	// end inline asm
	add.s32 	%r564, %r85, 21;
	setp.lt.s32 	%p145, %r564, %r121;
	and.pred  	%p146, %p145, %p4;
	selp.u32 	%r510, 1, 0, %p146;
	add.s64 	%rd186, %rd170, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r510, 0;
  mov.b16 %rs3974, %rs3894;
  @p ld.global.L2::128B.u16 %rs3974, [%rd186];
}

	// end inline asm
	and.pred  	%p147, %p145, %p3;
	selp.u32 	%r511, 1, 0, %p147;
	add.s64 	%rd187, %rd170, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r511, 0;
  mov.b16 %rs3976, %rs3896;
  @p ld.global.L2::128B.u16 %rs3976, [%rd187];
}

	// end inline asm
	and.pred  	%p148, %p145, %p2;
	selp.u32 	%r512, 1, 0, %p148;
	add.s64 	%rd188, %rd170, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r512, 0;
  mov.b16 %rs3978, %rs3898;
  @p ld.global.L2::128B.u16 %rs3978, [%rd188];
}

	// end inline asm
	and.pred  	%p149, %p145, %p1;
	selp.u32 	%r513, 1, 0, %p149;
	add.s64 	%rd189, %rd170, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r513, 0;
  mov.b16 %rs3980, %rs3900;
  @p ld.global.L2::128B.u16 %rs3980, [%rd189];
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4548;
	st.shared.u16 	[%r86+2], %rs4549;
	st.shared.u16 	[%r86+4], %rs4546;
	st.shared.u16 	[%r86+6], %rs4547;
	st.shared.u16 	[%r86+8], %rs4544;
	st.shared.u16 	[%r86+10], %rs4545;
	st.shared.u16 	[%r86+12], %rs4542;
	st.shared.u16 	[%r86+14], %rs4543;
	bar.sync 	0;
	ld.shared.u16 	%rs3987, [%r87];
	ld.shared.u16 	%rs3994, [%r87+64];
	ld.shared.u16 	%rs4001, [%r87+128];
	ld.shared.u16 	%rs4008, [%r87+192];
	ld.shared.u16 	%rs4015, [%r87+644];
	ld.shared.u16 	%rs4022, [%r87+708];
	ld.shared.u16 	%rs4029, [%r87+772];
	ld.shared.u16 	%rs4036, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3982,%rs4591,%rs3966,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3985, %rs4590, %rs3987, %rs3982;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3989,%rs4591,%rs3968,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3992, %rs4590, %rs3994, %rs3989;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs3996,%rs4591,%rs3970,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs3999, %rs4590, %rs4001, %rs3996;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4003,%rs4591,%rs3972,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4006, %rs4590, %rs4008, %rs4003;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4010,%rs4591,%rs3974,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4013, %rs4590, %rs4015, %rs4010;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4017,%rs4591,%rs3976,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4020, %rs4590, %rs4022, %rs4017;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4024,%rs4591,%rs3978,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4027, %rs4590, %rs4029, %rs4024;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4031,%rs4591,%rs3980,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4034, %rs4590, %rs4036, %rs4031;

	// end inline asm
	and.pred  	%p150, %p140, %p8;
	selp.u32 	%r514, 1, 0, %p150;
	add.s64 	%rd190, %rd174, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r514, 0;
  @p st.global.u16 [%rd190], %rs3985;
}

	// end inline asm
	and.pred  	%p151, %p140, %p7;
	selp.u32 	%r515, 1, 0, %p151;
	add.s64 	%rd191, %rd174, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r515, 0;
  @p st.global.u16 [%rd191], %rs3992;
}

	// end inline asm
	and.pred  	%p152, %p140, %p6;
	selp.u32 	%r516, 1, 0, %p152;
	add.s64 	%rd192, %rd174, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r516, 0;
  @p st.global.u16 [%rd192], %rs3999;
}

	// end inline asm
	and.pred  	%p153, %p140, %p5;
	selp.u32 	%r517, 1, 0, %p153;
	add.s64 	%rd193, %rd174, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r517, 0;
  @p st.global.u16 [%rd193], %rs4006;
}

	// end inline asm
	and.pred  	%p154, %p145, %p8;
	selp.u32 	%r518, 1, 0, %p154;
	add.s64 	%rd194, %rd178, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r518, 0;
  @p st.global.u16 [%rd194], %rs4013;
}

	// end inline asm
	and.pred  	%p155, %p145, %p7;
	selp.u32 	%r519, 1, 0, %p155;
	add.s64 	%rd195, %rd178, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r519, 0;
  @p st.global.u16 [%rd195], %rs4020;
}

	// end inline asm
	and.pred  	%p156, %p145, %p6;
	selp.u32 	%r520, 1, 0, %p156;
	add.s64 	%rd196, %rd178, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r520, 0;
  @p st.global.u16 [%rd196], %rs4027;
}

	// end inline asm
	and.pred  	%p157, %p145, %p5;
	selp.u32 	%r521, 1, 0, %p157;
	add.s64 	%rd197, %rd178, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r521, 0;
  @p st.global.u16 [%rd197], %rs4034;
}

	// end inline asm
	add.s32 	%r565, %r85, 6;
	setp.lt.s32 	%p158, %r565, %r121;
	and.pred  	%p159, %p158, %p4;
	selp.u32 	%r522, 1, 0, %p159;
	add.s64 	%rd198, %rd182, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r522, 0;
  mov.b16 %rs4046, %rs3966;
  @p ld.global.L2::128B.u16 %rs4046, [%rd198];
}

	// end inline asm
	and.pred  	%p160, %p158, %p3;
	selp.u32 	%r523, 1, 0, %p160;
	add.s64 	%rd199, %rd182, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r523, 0;
  mov.b16 %rs4048, %rs3968;
  @p ld.global.L2::128B.u16 %rs4048, [%rd199];
}

	// end inline asm
	and.pred  	%p161, %p158, %p2;
	selp.u32 	%r524, 1, 0, %p161;
	add.s64 	%rd200, %rd182, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r524, 0;
  mov.b16 %rs4050, %rs3970;
  @p ld.global.L2::128B.u16 %rs4050, [%rd200];
}

	// end inline asm
	and.pred  	%p162, %p158, %p1;
	selp.u32 	%r525, 1, 0, %p162;
	add.s64 	%rd201, %rd182, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r525, 0;
  mov.b16 %rs4052, %rs3972;
  @p ld.global.L2::128B.u16 %rs4052, [%rd201];
}

	// end inline asm
	add.s32 	%r566, %r85, 22;
	setp.lt.s32 	%p163, %r566, %r121;
	and.pred  	%p164, %p163, %p4;
	selp.u32 	%r526, 1, 0, %p164;
	add.s64 	%rd202, %rd186, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r526, 0;
  mov.b16 %rs4054, %rs3974;
  @p ld.global.L2::128B.u16 %rs4054, [%rd202];
}

	// end inline asm
	and.pred  	%p165, %p163, %p3;
	selp.u32 	%r527, 1, 0, %p165;
	add.s64 	%rd203, %rd186, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r527, 0;
  mov.b16 %rs4056, %rs3976;
  @p ld.global.L2::128B.u16 %rs4056, [%rd203];
}

	// end inline asm
	and.pred  	%p166, %p163, %p2;
	selp.u32 	%r528, 1, 0, %p166;
	add.s64 	%rd204, %rd186, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r528, 0;
  mov.b16 %rs4058, %rs3978;
  @p ld.global.L2::128B.u16 %rs4058, [%rd204];
}

	// end inline asm
	and.pred  	%p167, %p163, %p1;
	selp.u32 	%r529, 1, 0, %p167;
	add.s64 	%rd205, %rd186, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r529, 0;
  mov.b16 %rs4060, %rs3980;
  @p ld.global.L2::128B.u16 %rs4060, [%rd205];
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4540;
	st.shared.u16 	[%r86+2], %rs4541;
	st.shared.u16 	[%r86+4], %rs4538;
	st.shared.u16 	[%r86+6], %rs4539;
	st.shared.u16 	[%r86+8], %rs4536;
	st.shared.u16 	[%r86+10], %rs4537;
	st.shared.u16 	[%r86+12], %rs4534;
	st.shared.u16 	[%r86+14], %rs4535;
	bar.sync 	0;
	ld.shared.u16 	%rs4067, [%r87];
	ld.shared.u16 	%rs4074, [%r87+64];
	ld.shared.u16 	%rs4081, [%r87+128];
	ld.shared.u16 	%rs4088, [%r87+192];
	ld.shared.u16 	%rs4095, [%r87+644];
	ld.shared.u16 	%rs4102, [%r87+708];
	ld.shared.u16 	%rs4109, [%r87+772];
	ld.shared.u16 	%rs4116, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4062,%rs4591,%rs4046,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4065, %rs4590, %rs4067, %rs4062;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4069,%rs4591,%rs4048,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4072, %rs4590, %rs4074, %rs4069;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4076,%rs4591,%rs4050,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4079, %rs4590, %rs4081, %rs4076;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4083,%rs4591,%rs4052,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4086, %rs4590, %rs4088, %rs4083;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4090,%rs4591,%rs4054,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4093, %rs4590, %rs4095, %rs4090;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4097,%rs4591,%rs4056,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4100, %rs4590, %rs4102, %rs4097;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4104,%rs4591,%rs4058,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4107, %rs4590, %rs4109, %rs4104;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4111,%rs4591,%rs4060,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4114, %rs4590, %rs4116, %rs4111;

	// end inline asm
	and.pred  	%p168, %p158, %p8;
	selp.u32 	%r530, 1, 0, %p168;
	add.s64 	%rd206, %rd190, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r530, 0;
  @p st.global.u16 [%rd206], %rs4065;
}

	// end inline asm
	and.pred  	%p169, %p158, %p7;
	selp.u32 	%r531, 1, 0, %p169;
	add.s64 	%rd207, %rd190, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r531, 0;
  @p st.global.u16 [%rd207], %rs4072;
}

	// end inline asm
	and.pred  	%p170, %p158, %p6;
	selp.u32 	%r532, 1, 0, %p170;
	add.s64 	%rd208, %rd190, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r532, 0;
  @p st.global.u16 [%rd208], %rs4079;
}

	// end inline asm
	and.pred  	%p171, %p158, %p5;
	selp.u32 	%r533, 1, 0, %p171;
	add.s64 	%rd209, %rd190, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r533, 0;
  @p st.global.u16 [%rd209], %rs4086;
}

	// end inline asm
	and.pred  	%p172, %p163, %p8;
	selp.u32 	%r534, 1, 0, %p172;
	add.s64 	%rd210, %rd194, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r534, 0;
  @p st.global.u16 [%rd210], %rs4093;
}

	// end inline asm
	and.pred  	%p173, %p163, %p7;
	selp.u32 	%r535, 1, 0, %p173;
	add.s64 	%rd211, %rd194, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r535, 0;
  @p st.global.u16 [%rd211], %rs4100;
}

	// end inline asm
	and.pred  	%p174, %p163, %p6;
	selp.u32 	%r536, 1, 0, %p174;
	add.s64 	%rd212, %rd194, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r536, 0;
  @p st.global.u16 [%rd212], %rs4107;
}

	// end inline asm
	and.pred  	%p175, %p163, %p5;
	selp.u32 	%r537, 1, 0, %p175;
	add.s64 	%rd213, %rd194, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r537, 0;
  @p st.global.u16 [%rd213], %rs4114;
}

	// end inline asm
	add.s32 	%r567, %r85, 7;
	setp.lt.s32 	%p176, %r567, %r121;
	and.pred  	%p177, %p176, %p4;
	selp.u32 	%r538, 1, 0, %p177;
	add.s64 	%rd214, %rd198, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r538, 0;
  mov.b16 %rs4126, %rs4046;
  @p ld.global.L2::128B.u16 %rs4126, [%rd214];
}

	// end inline asm
	and.pred  	%p178, %p176, %p3;
	selp.u32 	%r539, 1, 0, %p178;
	add.s64 	%rd215, %rd198, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r539, 0;
  mov.b16 %rs4128, %rs4048;
  @p ld.global.L2::128B.u16 %rs4128, [%rd215];
}

	// end inline asm
	and.pred  	%p179, %p176, %p2;
	selp.u32 	%r540, 1, 0, %p179;
	add.s64 	%rd216, %rd198, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r540, 0;
  mov.b16 %rs4130, %rs4050;
  @p ld.global.L2::128B.u16 %rs4130, [%rd216];
}

	// end inline asm
	and.pred  	%p180, %p176, %p1;
	selp.u32 	%r541, 1, 0, %p180;
	add.s64 	%rd217, %rd198, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r541, 0;
  mov.b16 %rs4132, %rs4052;
  @p ld.global.L2::128B.u16 %rs4132, [%rd217];
}

	// end inline asm
	add.s32 	%r568, %r85, 23;
	setp.lt.s32 	%p181, %r568, %r121;
	and.pred  	%p182, %p181, %p4;
	selp.u32 	%r542, 1, 0, %p182;
	add.s64 	%rd218, %rd202, %rd30;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r542, 0;
  mov.b16 %rs4134, %rs4054;
  @p ld.global.L2::128B.u16 %rs4134, [%rd218];
}

	// end inline asm
	and.pred  	%p183, %p181, %p3;
	selp.u32 	%r543, 1, 0, %p183;
	add.s64 	%rd219, %rd202, %rd230;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r543, 0;
  mov.b16 %rs4136, %rs4056;
  @p ld.global.L2::128B.u16 %rs4136, [%rd219];
}

	// end inline asm
	and.pred  	%p184, %p181, %p2;
	selp.u32 	%r544, 1, 0, %p184;
	add.s64 	%rd220, %rd202, %rd231;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r544, 0;
  mov.b16 %rs4138, %rs4058;
  @p ld.global.L2::128B.u16 %rs4138, [%rd220];
}

	// end inline asm
	and.pred  	%p185, %p181, %p1;
	selp.u32 	%r545, 1, 0, %p185;
	add.s64 	%rd221, %rd202, %rd232;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r545, 0;
  mov.b16 %rs4140, %rs4060;
  @p ld.global.L2::128B.u16 %rs4140, [%rd221];
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4532;
	st.shared.u16 	[%r86+2], %rs4533;
	st.shared.u16 	[%r86+4], %rs4530;
	st.shared.u16 	[%r86+6], %rs4531;
	st.shared.u16 	[%r86+8], %rs4528;
	st.shared.u16 	[%r86+10], %rs4529;
	st.shared.u16 	[%r86+12], %rs4526;
	st.shared.u16 	[%r86+14], %rs4527;
	bar.sync 	0;
	ld.shared.u16 	%rs4147, [%r87];
	ld.shared.u16 	%rs4154, [%r87+64];
	ld.shared.u16 	%rs4161, [%r87+128];
	ld.shared.u16 	%rs4168, [%r87+192];
	ld.shared.u16 	%rs4175, [%r87+644];
	ld.shared.u16 	%rs4182, [%r87+708];
	ld.shared.u16 	%rs4189, [%r87+772];
	ld.shared.u16 	%rs4196, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4142,%rs4591,%rs4126,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4145, %rs4590, %rs4147, %rs4142;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4149,%rs4591,%rs4128,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4152, %rs4590, %rs4154, %rs4149;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4156,%rs4591,%rs4130,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4159, %rs4590, %rs4161, %rs4156;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4163,%rs4591,%rs4132,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4166, %rs4590, %rs4168, %rs4163;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4170,%rs4591,%rs4134,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4173, %rs4590, %rs4175, %rs4170;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4177,%rs4591,%rs4136,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4180, %rs4590, %rs4182, %rs4177;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4184,%rs4591,%rs4138,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4187, %rs4590, %rs4189, %rs4184;

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4191,%rs4591,%rs4140,c;}

	// end inline asm
	// begin inline asm
	fma.rn.bf16 %rs4194, %rs4590, %rs4196, %rs4191;

	// end inline asm
	and.pred  	%p186, %p176, %p8;
	selp.u32 	%r546, 1, 0, %p186;
	add.s64 	%rd222, %rd206, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r546, 0;
  @p st.global.u16 [%rd222], %rs4145;
}

	// end inline asm
	and.pred  	%p187, %p176, %p7;
	selp.u32 	%r547, 1, 0, %p187;
	add.s64 	%rd223, %rd206, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r547, 0;
  @p st.global.u16 [%rd223], %rs4152;
}

	// end inline asm
	and.pred  	%p188, %p176, %p6;
	selp.u32 	%r548, 1, 0, %p188;
	add.s64 	%rd224, %rd206, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r548, 0;
  @p st.global.u16 [%rd224], %rs4159;
}

	// end inline asm
	and.pred  	%p189, %p176, %p5;
	selp.u32 	%r549, 1, 0, %p189;
	add.s64 	%rd225, %rd206, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r549, 0;
  @p st.global.u16 [%rd225], %rs4166;
}

	// end inline asm
	and.pred  	%p190, %p181, %p8;
	selp.u32 	%r550, 1, 0, %p190;
	add.s64 	%rd226, %rd210, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r550, 0;
  @p st.global.u16 [%rd226], %rs4173;
}

	// end inline asm
	and.pred  	%p191, %p181, %p7;
	selp.u32 	%r551, 1, 0, %p191;
	add.s64 	%rd227, %rd210, %rd233;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r551, 0;
  @p st.global.u16 [%rd227], %rs4180;
}

	// end inline asm
	and.pred  	%p192, %p181, %p6;
	selp.u32 	%r552, 1, 0, %p192;
	add.s64 	%rd228, %rd210, %rd234;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r552, 0;
  @p st.global.u16 [%rd228], %rs4187;
}

	// end inline asm
	and.pred  	%p193, %p181, %p5;
	selp.u32 	%r553, 1, 0, %p193;
	add.s64 	%rd229, %rd210, %rd235;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r553, 0;
  @p st.global.u16 [%rd229], %rs4194;
}

	// end inline asm
	bra.uni 	$L__BB0_22;

$L__BB0_21:
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4588;
	st.shared.u16 	[%r86+2], %rs4589;
	st.shared.u16 	[%r86+4], %rs4586;
	st.shared.u16 	[%r86+6], %rs4587;
	st.shared.u16 	[%r86+8], %rs4584;
	st.shared.u16 	[%r86+10], %rs4585;
	st.shared.u16 	[%r86+12], %rs4582;
	st.shared.u16 	[%r86+14], %rs4583;
	bar.sync 	0;
	ld.shared.u16 	%rs4208, [%r87];
	ld.shared.u16 	%rs4211, [%r87+64];
	ld.shared.u16 	%rs4214, [%r87+128];
	ld.shared.u16 	%rs4217, [%r87+192];
	ld.shared.u16 	%rs4220, [%r87+644];
	ld.shared.u16 	%rs4223, [%r87+708];
	ld.shared.u16 	%rs4226, [%r87+772];
	ld.shared.u16 	%rs4229, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4206,%rs4590,%rs4208,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4209,%rs4590,%rs4211,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4212,%rs4590,%rs4214,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4215,%rs4590,%rs4217,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4218,%rs4590,%rs4220,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4221,%rs4590,%rs4223,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4224,%rs4590,%rs4226,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4227,%rs4590,%rs4229,c;}

	// end inline asm
	setp.lt.s32 	%p194, %r85, %r121;
	and.pred  	%p195, %p194, %p8;
	selp.u32 	%r569, 1, 0, %p195;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r569, 0;
  @p st.global.u16 [%rd34], %rs4206;
}

	// end inline asm
	and.pred  	%p196, %p194, %p7;
	selp.u32 	%r570, 1, 0, %p196;
	add.s64 	%rd237, %rd34, 64;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r570, 0;
  @p st.global.u16 [%rd237], %rs4209;
}

	// end inline asm
	and.pred  	%p197, %p194, %p6;
	selp.u32 	%r571, 1, 0, %p197;
	add.s64 	%rd238, %rd34, 128;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r571, 0;
  @p st.global.u16 [%rd238], %rs4212;
}

	// end inline asm
	and.pred  	%p198, %p194, %p5;
	selp.u32 	%r572, 1, 0, %p198;
	add.s64 	%rd239, %rd34, 192;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r572, 0;
  @p st.global.u16 [%rd239], %rs4215;
}

	// end inline asm
	add.s32 	%r633, %r85, 16;
	setp.lt.s32 	%p199, %r633, %r121;
	and.pred  	%p200, %p199, %p8;
	selp.u32 	%r573, 1, 0, %p200;
	add.s64 	%rd240, %rd34, %rd32;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r573, 0;
  @p st.global.u16 [%rd240], %rs4218;
}

	// end inline asm
	add.s64 	%rd241, %rd240, 64;
	and.pred  	%p201, %p199, %p7;
	selp.u32 	%r574, 1, 0, %p201;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r574, 0;
  @p st.global.u16 [%rd241], %rs4221;
}

	// end inline asm
	add.s64 	%rd242, %rd240, 128;
	and.pred  	%p202, %p199, %p6;
	selp.u32 	%r575, 1, 0, %p202;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r575, 0;
  @p st.global.u16 [%rd242], %rs4224;
}

	// end inline asm
	add.s64 	%rd243, %rd240, 192;
	and.pred  	%p203, %p199, %p5;
	selp.u32 	%r576, 1, 0, %p203;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r576, 0;
  @p st.global.u16 [%rd243], %rs4227;
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4580;
	st.shared.u16 	[%r86+2], %rs4581;
	st.shared.u16 	[%r86+4], %rs4578;
	st.shared.u16 	[%r86+6], %rs4579;
	st.shared.u16 	[%r86+8], %rs4576;
	st.shared.u16 	[%r86+10], %rs4577;
	st.shared.u16 	[%r86+12], %rs4574;
	st.shared.u16 	[%r86+14], %rs4575;
	bar.sync 	0;
	ld.shared.u16 	%rs4240, [%r87];
	ld.shared.u16 	%rs4243, [%r87+64];
	ld.shared.u16 	%rs4246, [%r87+128];
	ld.shared.u16 	%rs4249, [%r87+192];
	ld.shared.u16 	%rs4252, [%r87+644];
	ld.shared.u16 	%rs4255, [%r87+708];
	ld.shared.u16 	%rs4258, [%r87+772];
	ld.shared.u16 	%rs4261, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4238,%rs4590,%rs4240,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4241,%rs4590,%rs4243,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4244,%rs4590,%rs4246,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4247,%rs4590,%rs4249,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4250,%rs4590,%rs4252,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4253,%rs4590,%rs4255,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4256,%rs4590,%rs4258,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4259,%rs4590,%rs4261,c;}

	// end inline asm
	add.s32 	%r634, %r85, 1;
	setp.lt.s32 	%p204, %r634, %r121;
	and.pred  	%p205, %p204, %p8;
	selp.u32 	%r577, 1, 0, %p205;
	add.s64 	%rd244, %rd34, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r577, 0;
  @p st.global.u16 [%rd244], %rs4238;
}

	// end inline asm
	and.pred  	%p206, %p204, %p7;
	selp.u32 	%r578, 1, 0, %p206;
	add.s64 	%rd300, %rd33, 64;
	add.s64 	%rd245, %rd34, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r578, 0;
  @p st.global.u16 [%rd245], %rs4241;
}

	// end inline asm
	and.pred  	%p207, %p204, %p6;
	selp.u32 	%r579, 1, 0, %p207;
	add.s64 	%rd301, %rd33, 128;
	add.s64 	%rd246, %rd34, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r579, 0;
  @p st.global.u16 [%rd246], %rs4244;
}

	// end inline asm
	and.pred  	%p208, %p204, %p5;
	selp.u32 	%r580, 1, 0, %p208;
	add.s64 	%rd302, %rd33, 192;
	add.s64 	%rd247, %rd34, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r580, 0;
  @p st.global.u16 [%rd247], %rs4247;
}

	// end inline asm
	add.s32 	%r635, %r85, 17;
	setp.lt.s32 	%p209, %r635, %r121;
	and.pred  	%p210, %p209, %p8;
	selp.u32 	%r581, 1, 0, %p210;
	add.s64 	%rd248, %rd240, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r581, 0;
  @p st.global.u16 [%rd248], %rs4250;
}

	// end inline asm
	and.pred  	%p211, %p209, %p7;
	selp.u32 	%r582, 1, 0, %p211;
	add.s64 	%rd249, %rd240, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r582, 0;
  @p st.global.u16 [%rd249], %rs4253;
}

	// end inline asm
	and.pred  	%p212, %p209, %p6;
	selp.u32 	%r583, 1, 0, %p212;
	add.s64 	%rd250, %rd240, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r583, 0;
  @p st.global.u16 [%rd250], %rs4256;
}

	// end inline asm
	and.pred  	%p213, %p209, %p5;
	selp.u32 	%r584, 1, 0, %p213;
	add.s64 	%rd251, %rd240, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r584, 0;
  @p st.global.u16 [%rd251], %rs4259;
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4572;
	st.shared.u16 	[%r86+2], %rs4573;
	st.shared.u16 	[%r86+4], %rs4570;
	st.shared.u16 	[%r86+6], %rs4571;
	st.shared.u16 	[%r86+8], %rs4568;
	st.shared.u16 	[%r86+10], %rs4569;
	st.shared.u16 	[%r86+12], %rs4566;
	st.shared.u16 	[%r86+14], %rs4567;
	bar.sync 	0;
	ld.shared.u16 	%rs4272, [%r87];
	ld.shared.u16 	%rs4275, [%r87+64];
	ld.shared.u16 	%rs4278, [%r87+128];
	ld.shared.u16 	%rs4281, [%r87+192];
	ld.shared.u16 	%rs4284, [%r87+644];
	ld.shared.u16 	%rs4287, [%r87+708];
	ld.shared.u16 	%rs4290, [%r87+772];
	ld.shared.u16 	%rs4293, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4270,%rs4590,%rs4272,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4273,%rs4590,%rs4275,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4276,%rs4590,%rs4278,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4279,%rs4590,%rs4281,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4282,%rs4590,%rs4284,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4285,%rs4590,%rs4287,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4288,%rs4590,%rs4290,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4291,%rs4590,%rs4293,c;}

	// end inline asm
	add.s32 	%r636, %r85, 2;
	setp.lt.s32 	%p214, %r636, %r121;
	and.pred  	%p215, %p214, %p8;
	selp.u32 	%r585, 1, 0, %p215;
	add.s64 	%rd252, %rd244, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r585, 0;
  @p st.global.u16 [%rd252], %rs4270;
}

	// end inline asm
	and.pred  	%p216, %p214, %p7;
	selp.u32 	%r586, 1, 0, %p216;
	add.s64 	%rd253, %rd244, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r586, 0;
  @p st.global.u16 [%rd253], %rs4273;
}

	// end inline asm
	and.pred  	%p217, %p214, %p6;
	selp.u32 	%r587, 1, 0, %p217;
	add.s64 	%rd254, %rd244, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r587, 0;
  @p st.global.u16 [%rd254], %rs4276;
}

	// end inline asm
	and.pred  	%p218, %p214, %p5;
	selp.u32 	%r588, 1, 0, %p218;
	add.s64 	%rd255, %rd244, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r588, 0;
  @p st.global.u16 [%rd255], %rs4279;
}

	// end inline asm
	add.s32 	%r637, %r85, 18;
	setp.lt.s32 	%p219, %r637, %r121;
	and.pred  	%p220, %p219, %p8;
	selp.u32 	%r589, 1, 0, %p220;
	add.s64 	%rd256, %rd248, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r589, 0;
  @p st.global.u16 [%rd256], %rs4282;
}

	// end inline asm
	and.pred  	%p221, %p219, %p7;
	selp.u32 	%r590, 1, 0, %p221;
	add.s64 	%rd257, %rd248, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r590, 0;
  @p st.global.u16 [%rd257], %rs4285;
}

	// end inline asm
	and.pred  	%p222, %p219, %p6;
	selp.u32 	%r591, 1, 0, %p222;
	add.s64 	%rd258, %rd248, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r591, 0;
  @p st.global.u16 [%rd258], %rs4288;
}

	// end inline asm
	and.pred  	%p223, %p219, %p5;
	selp.u32 	%r592, 1, 0, %p223;
	add.s64 	%rd259, %rd248, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r592, 0;
  @p st.global.u16 [%rd259], %rs4291;
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4564;
	st.shared.u16 	[%r86+2], %rs4565;
	st.shared.u16 	[%r86+4], %rs4562;
	st.shared.u16 	[%r86+6], %rs4563;
	st.shared.u16 	[%r86+8], %rs4560;
	st.shared.u16 	[%r86+10], %rs4561;
	st.shared.u16 	[%r86+12], %rs4558;
	st.shared.u16 	[%r86+14], %rs4559;
	bar.sync 	0;
	ld.shared.u16 	%rs4304, [%r87];
	ld.shared.u16 	%rs4307, [%r87+64];
	ld.shared.u16 	%rs4310, [%r87+128];
	ld.shared.u16 	%rs4313, [%r87+192];
	ld.shared.u16 	%rs4316, [%r87+644];
	ld.shared.u16 	%rs4319, [%r87+708];
	ld.shared.u16 	%rs4322, [%r87+772];
	ld.shared.u16 	%rs4325, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4302,%rs4590,%rs4304,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4305,%rs4590,%rs4307,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4308,%rs4590,%rs4310,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4311,%rs4590,%rs4313,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4314,%rs4590,%rs4316,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4317,%rs4590,%rs4319,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4320,%rs4590,%rs4322,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4323,%rs4590,%rs4325,c;}

	// end inline asm
	add.s32 	%r638, %r85, 3;
	setp.lt.s32 	%p224, %r638, %r121;
	and.pred  	%p225, %p224, %p8;
	selp.u32 	%r593, 1, 0, %p225;
	add.s64 	%rd260, %rd252, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r593, 0;
  @p st.global.u16 [%rd260], %rs4302;
}

	// end inline asm
	and.pred  	%p226, %p224, %p7;
	selp.u32 	%r594, 1, 0, %p226;
	add.s64 	%rd261, %rd252, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r594, 0;
  @p st.global.u16 [%rd261], %rs4305;
}

	// end inline asm
	and.pred  	%p227, %p224, %p6;
	selp.u32 	%r595, 1, 0, %p227;
	add.s64 	%rd262, %rd252, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r595, 0;
  @p st.global.u16 [%rd262], %rs4308;
}

	// end inline asm
	and.pred  	%p228, %p224, %p5;
	selp.u32 	%r596, 1, 0, %p228;
	add.s64 	%rd263, %rd252, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r596, 0;
  @p st.global.u16 [%rd263], %rs4311;
}

	// end inline asm
	add.s32 	%r639, %r85, 19;
	setp.lt.s32 	%p229, %r639, %r121;
	and.pred  	%p230, %p229, %p8;
	selp.u32 	%r597, 1, 0, %p230;
	add.s64 	%rd264, %rd256, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r597, 0;
  @p st.global.u16 [%rd264], %rs4314;
}

	// end inline asm
	and.pred  	%p231, %p229, %p7;
	selp.u32 	%r598, 1, 0, %p231;
	add.s64 	%rd265, %rd256, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r598, 0;
  @p st.global.u16 [%rd265], %rs4317;
}

	// end inline asm
	and.pred  	%p232, %p229, %p6;
	selp.u32 	%r599, 1, 0, %p232;
	add.s64 	%rd266, %rd256, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r599, 0;
  @p st.global.u16 [%rd266], %rs4320;
}

	// end inline asm
	and.pred  	%p233, %p229, %p5;
	selp.u32 	%r600, 1, 0, %p233;
	add.s64 	%rd267, %rd256, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r600, 0;
  @p st.global.u16 [%rd267], %rs4323;
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4556;
	st.shared.u16 	[%r86+2], %rs4557;
	st.shared.u16 	[%r86+4], %rs4554;
	st.shared.u16 	[%r86+6], %rs4555;
	st.shared.u16 	[%r86+8], %rs4552;
	st.shared.u16 	[%r86+10], %rs4553;
	st.shared.u16 	[%r86+12], %rs4550;
	st.shared.u16 	[%r86+14], %rs4551;
	bar.sync 	0;
	ld.shared.u16 	%rs4336, [%r87];
	ld.shared.u16 	%rs4339, [%r87+64];
	ld.shared.u16 	%rs4342, [%r87+128];
	ld.shared.u16 	%rs4345, [%r87+192];
	ld.shared.u16 	%rs4348, [%r87+644];
	ld.shared.u16 	%rs4351, [%r87+708];
	ld.shared.u16 	%rs4354, [%r87+772];
	ld.shared.u16 	%rs4357, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4334,%rs4590,%rs4336,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4337,%rs4590,%rs4339,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4340,%rs4590,%rs4342,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4343,%rs4590,%rs4345,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4346,%rs4590,%rs4348,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4349,%rs4590,%rs4351,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4352,%rs4590,%rs4354,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4355,%rs4590,%rs4357,c;}

	// end inline asm
	add.s32 	%r640, %r85, 4;
	setp.lt.s32 	%p234, %r640, %r121;
	and.pred  	%p235, %p234, %p8;
	selp.u32 	%r601, 1, 0, %p235;
	add.s64 	%rd268, %rd260, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r601, 0;
  @p st.global.u16 [%rd268], %rs4334;
}

	// end inline asm
	and.pred  	%p236, %p234, %p7;
	selp.u32 	%r602, 1, 0, %p236;
	add.s64 	%rd269, %rd260, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r602, 0;
  @p st.global.u16 [%rd269], %rs4337;
}

	// end inline asm
	and.pred  	%p237, %p234, %p6;
	selp.u32 	%r603, 1, 0, %p237;
	add.s64 	%rd270, %rd260, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r603, 0;
  @p st.global.u16 [%rd270], %rs4340;
}

	// end inline asm
	and.pred  	%p238, %p234, %p5;
	selp.u32 	%r604, 1, 0, %p238;
	add.s64 	%rd271, %rd260, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r604, 0;
  @p st.global.u16 [%rd271], %rs4343;
}

	// end inline asm
	add.s32 	%r641, %r85, 20;
	setp.lt.s32 	%p239, %r641, %r121;
	and.pred  	%p240, %p239, %p8;
	selp.u32 	%r605, 1, 0, %p240;
	add.s64 	%rd272, %rd264, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r605, 0;
  @p st.global.u16 [%rd272], %rs4346;
}

	// end inline asm
	and.pred  	%p241, %p239, %p7;
	selp.u32 	%r606, 1, 0, %p241;
	add.s64 	%rd273, %rd264, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r606, 0;
  @p st.global.u16 [%rd273], %rs4349;
}

	// end inline asm
	and.pred  	%p242, %p239, %p6;
	selp.u32 	%r607, 1, 0, %p242;
	add.s64 	%rd274, %rd264, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r607, 0;
  @p st.global.u16 [%rd274], %rs4352;
}

	// end inline asm
	and.pred  	%p243, %p239, %p5;
	selp.u32 	%r608, 1, 0, %p243;
	add.s64 	%rd275, %rd264, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r608, 0;
  @p st.global.u16 [%rd275], %rs4355;
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4548;
	st.shared.u16 	[%r86+2], %rs4549;
	st.shared.u16 	[%r86+4], %rs4546;
	st.shared.u16 	[%r86+6], %rs4547;
	st.shared.u16 	[%r86+8], %rs4544;
	st.shared.u16 	[%r86+10], %rs4545;
	st.shared.u16 	[%r86+12], %rs4542;
	st.shared.u16 	[%r86+14], %rs4543;
	bar.sync 	0;
	ld.shared.u16 	%rs4368, [%r87];
	ld.shared.u16 	%rs4371, [%r87+64];
	ld.shared.u16 	%rs4374, [%r87+128];
	ld.shared.u16 	%rs4377, [%r87+192];
	ld.shared.u16 	%rs4380, [%r87+644];
	ld.shared.u16 	%rs4383, [%r87+708];
	ld.shared.u16 	%rs4386, [%r87+772];
	ld.shared.u16 	%rs4389, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4366,%rs4590,%rs4368,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4369,%rs4590,%rs4371,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4372,%rs4590,%rs4374,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4375,%rs4590,%rs4377,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4378,%rs4590,%rs4380,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4381,%rs4590,%rs4383,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4384,%rs4590,%rs4386,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4387,%rs4590,%rs4389,c;}

	// end inline asm
	add.s32 	%r642, %r85, 5;
	setp.lt.s32 	%p244, %r642, %r121;
	and.pred  	%p245, %p244, %p8;
	selp.u32 	%r609, 1, 0, %p245;
	add.s64 	%rd276, %rd268, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r609, 0;
  @p st.global.u16 [%rd276], %rs4366;
}

	// end inline asm
	and.pred  	%p246, %p244, %p7;
	selp.u32 	%r610, 1, 0, %p246;
	add.s64 	%rd277, %rd268, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r610, 0;
  @p st.global.u16 [%rd277], %rs4369;
}

	// end inline asm
	and.pred  	%p247, %p244, %p6;
	selp.u32 	%r611, 1, 0, %p247;
	add.s64 	%rd278, %rd268, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r611, 0;
  @p st.global.u16 [%rd278], %rs4372;
}

	// end inline asm
	and.pred  	%p248, %p244, %p5;
	selp.u32 	%r612, 1, 0, %p248;
	add.s64 	%rd279, %rd268, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r612, 0;
  @p st.global.u16 [%rd279], %rs4375;
}

	// end inline asm
	add.s32 	%r643, %r85, 21;
	setp.lt.s32 	%p249, %r643, %r121;
	and.pred  	%p250, %p249, %p8;
	selp.u32 	%r613, 1, 0, %p250;
	add.s64 	%rd280, %rd272, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r613, 0;
  @p st.global.u16 [%rd280], %rs4378;
}

	// end inline asm
	and.pred  	%p251, %p249, %p7;
	selp.u32 	%r614, 1, 0, %p251;
	add.s64 	%rd281, %rd272, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r614, 0;
  @p st.global.u16 [%rd281], %rs4381;
}

	// end inline asm
	and.pred  	%p252, %p249, %p6;
	selp.u32 	%r615, 1, 0, %p252;
	add.s64 	%rd282, %rd272, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r615, 0;
  @p st.global.u16 [%rd282], %rs4384;
}

	// end inline asm
	and.pred  	%p253, %p249, %p5;
	selp.u32 	%r616, 1, 0, %p253;
	add.s64 	%rd283, %rd272, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r616, 0;
  @p st.global.u16 [%rd283], %rs4387;
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4540;
	st.shared.u16 	[%r86+2], %rs4541;
	st.shared.u16 	[%r86+4], %rs4538;
	st.shared.u16 	[%r86+6], %rs4539;
	st.shared.u16 	[%r86+8], %rs4536;
	st.shared.u16 	[%r86+10], %rs4537;
	st.shared.u16 	[%r86+12], %rs4534;
	st.shared.u16 	[%r86+14], %rs4535;
	bar.sync 	0;
	ld.shared.u16 	%rs4400, [%r87];
	ld.shared.u16 	%rs4403, [%r87+64];
	ld.shared.u16 	%rs4406, [%r87+128];
	ld.shared.u16 	%rs4409, [%r87+192];
	ld.shared.u16 	%rs4412, [%r87+644];
	ld.shared.u16 	%rs4415, [%r87+708];
	ld.shared.u16 	%rs4418, [%r87+772];
	ld.shared.u16 	%rs4421, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4398,%rs4590,%rs4400,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4401,%rs4590,%rs4403,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4404,%rs4590,%rs4406,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4407,%rs4590,%rs4409,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4410,%rs4590,%rs4412,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4413,%rs4590,%rs4415,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4416,%rs4590,%rs4418,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4419,%rs4590,%rs4421,c;}

	// end inline asm
	add.s32 	%r644, %r85, 6;
	setp.lt.s32 	%p254, %r644, %r121;
	and.pred  	%p255, %p254, %p8;
	selp.u32 	%r617, 1, 0, %p255;
	add.s64 	%rd284, %rd276, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r617, 0;
  @p st.global.u16 [%rd284], %rs4398;
}

	// end inline asm
	and.pred  	%p256, %p254, %p7;
	selp.u32 	%r618, 1, 0, %p256;
	add.s64 	%rd285, %rd276, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r618, 0;
  @p st.global.u16 [%rd285], %rs4401;
}

	// end inline asm
	and.pred  	%p257, %p254, %p6;
	selp.u32 	%r619, 1, 0, %p257;
	add.s64 	%rd286, %rd276, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r619, 0;
  @p st.global.u16 [%rd286], %rs4404;
}

	// end inline asm
	and.pred  	%p258, %p254, %p5;
	selp.u32 	%r620, 1, 0, %p258;
	add.s64 	%rd287, %rd276, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r620, 0;
  @p st.global.u16 [%rd287], %rs4407;
}

	// end inline asm
	add.s32 	%r645, %r85, 22;
	setp.lt.s32 	%p259, %r645, %r121;
	and.pred  	%p260, %p259, %p8;
	selp.u32 	%r621, 1, 0, %p260;
	add.s64 	%rd288, %rd280, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r621, 0;
  @p st.global.u16 [%rd288], %rs4410;
}

	// end inline asm
	and.pred  	%p261, %p259, %p7;
	selp.u32 	%r622, 1, 0, %p261;
	add.s64 	%rd289, %rd280, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r622, 0;
  @p st.global.u16 [%rd289], %rs4413;
}

	// end inline asm
	and.pred  	%p262, %p259, %p6;
	selp.u32 	%r623, 1, 0, %p262;
	add.s64 	%rd290, %rd280, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r623, 0;
  @p st.global.u16 [%rd290], %rs4416;
}

	// end inline asm
	and.pred  	%p263, %p259, %p5;
	selp.u32 	%r624, 1, 0, %p263;
	add.s64 	%rd291, %rd280, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r624, 0;
  @p st.global.u16 [%rd291], %rs4419;
}

	// end inline asm
	bar.sync 	0;
	st.shared.u16 	[%r86], %rs4532;
	st.shared.u16 	[%r86+2], %rs4533;
	st.shared.u16 	[%r86+4], %rs4530;
	st.shared.u16 	[%r86+6], %rs4531;
	st.shared.u16 	[%r86+8], %rs4528;
	st.shared.u16 	[%r86+10], %rs4529;
	st.shared.u16 	[%r86+12], %rs4526;
	st.shared.u16 	[%r86+14], %rs4527;
	bar.sync 	0;
	ld.shared.u16 	%rs4432, [%r87];
	ld.shared.u16 	%rs4435, [%r87+64];
	ld.shared.u16 	%rs4438, [%r87+128];
	ld.shared.u16 	%rs4441, [%r87+192];
	ld.shared.u16 	%rs4444, [%r87+644];
	ld.shared.u16 	%rs4447, [%r87+708];
	ld.shared.u16 	%rs4450, [%r87+772];
	ld.shared.u16 	%rs4453, [%r87+836];
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4430,%rs4590,%rs4432,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4433,%rs4590,%rs4435,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4436,%rs4590,%rs4438,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4439,%rs4590,%rs4441,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4442,%rs4590,%rs4444,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4445,%rs4590,%rs4447,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4448,%rs4590,%rs4450,c;}

	// end inline asm
	// begin inline asm
	{.reg .b16 c;
  mov.b16 c, 0x8000U;
  fma.rn.bf16 %rs4451,%rs4590,%rs4453,c;}

	// end inline asm
	add.s32 	%r646, %r85, 7;
	setp.lt.s32 	%p264, %r646, %r121;
	and.pred  	%p265, %p264, %p8;
	selp.u32 	%r625, 1, 0, %p265;
	add.s64 	%rd292, %rd284, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r625, 0;
  @p st.global.u16 [%rd292], %rs4430;
}

	// end inline asm
	and.pred  	%p266, %p264, %p7;
	selp.u32 	%r626, 1, 0, %p266;
	add.s64 	%rd293, %rd284, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r626, 0;
  @p st.global.u16 [%rd293], %rs4433;
}

	// end inline asm
	and.pred  	%p267, %p264, %p6;
	selp.u32 	%r627, 1, 0, %p267;
	add.s64 	%rd294, %rd284, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r627, 0;
  @p st.global.u16 [%rd294], %rs4436;
}

	// end inline asm
	and.pred  	%p268, %p264, %p5;
	selp.u32 	%r628, 1, 0, %p268;
	add.s64 	%rd295, %rd284, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r628, 0;
  @p st.global.u16 [%rd295], %rs4439;
}

	// end inline asm
	add.s32 	%r647, %r85, 23;
	setp.lt.s32 	%p269, %r647, %r121;
	and.pred  	%p270, %p269, %p8;
	selp.u32 	%r629, 1, 0, %p270;
	add.s64 	%rd296, %rd288, %rd33;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r629, 0;
  @p st.global.u16 [%rd296], %rs4442;
}

	// end inline asm
	and.pred  	%p271, %p269, %p7;
	selp.u32 	%r630, 1, 0, %p271;
	add.s64 	%rd297, %rd288, %rd300;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r630, 0;
  @p st.global.u16 [%rd297], %rs4445;
}

	// end inline asm
	and.pred  	%p272, %p269, %p6;
	selp.u32 	%r631, 1, 0, %p272;
	add.s64 	%rd298, %rd288, %rd301;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r631, 0;
  @p st.global.u16 [%rd298], %rs4448;
}

	// end inline asm
	and.pred  	%p273, %p269, %p5;
	selp.u32 	%r632, 1, 0, %p273;
	add.s64 	%rd299, %rd288, %rd302;
	// begin inline asm
	{
  .reg .pred p;
  setp.ne.b32 p, %r632, 0;
  @p st.global.u16 [%rd299], %rs4451;
}

	// end inline asm

$L__BB0_22:
	ret;

}

